Prompt,Jaccard,Cosine,Euclidean Distance
"img = np.fromfile(dph_files[0], dtype=np.uint16)
print (img.size) 

is there a faster way to check raw array size?",0.1935483870967742,0.7340227879893066,13.45362404707371
"I have a server.js  please refactor it

const express = require('express');
const app = express();
const port = process.env.PORT || 5000;
const path = require('path');
const fs = require('fs')
const contentful = require(""contentful"");
const compression = require('compression');

const SPACE_ID = process.env.REACT_APP_SPACE_ID;
const ACCESS_TOKEN = process.env.REACT_APP_ACCESS_TOKEN;
const MANAGER_TOKEN = process.env.REACT_APP_MANAGER_TOKEN;
const ENVIRONMENT = process.env.REACT_APP_ENVIRONMENT || ""master"";

const client = contentful.createClient({
  space: SPACE_ID,
  accessToken: ACCESS_TOKEN,
  environment: ENVIRONMENT
});

const getJob = (slug) => client.getEntries({
  content_type: 'job',
  'fields.slug': slug,
  select: 'fields.ogTitle,fields.ogDescription,fields.ogImage,fields.position,fields.company,fields.city',
  limit: 1,
});

const mainTitle = ""IT jobs with salaries - Jobs For IT"";
const mainDescription = ""Job offers for software developers, testers, UX designers, DevOps"";
const mainImage = ""https://www.jobsforit.de/static/media/wiewior.4979dfde.png"";

app.use(compression());
app.use(express.static(path.resolve(__dirname, '..', 'build')));

const filePath = path.resolve(__dirname, '..', 'build', 'index.html');
const filePathPolicy = path.resolve(__dirname, '..', 'build', 'privacy-policy.html');

app.get('/jobs/:id', function(request, response) {
  const id = request.params.id;
  fs.readFile(filePath, 'utf8', (err,data) => {
    if (err) {
      return console.log(err);
    }

    getJob(id)
      .then(entries => {
        const { position, ogTitle, ogDescription, ogImage } = entries.items[0].fields;
        const { name: company, logo } = entries.items[0].fields.company.fields;
        const { name: city } = entries.items[0].fields.city.fields;
        const title = ogTitle || `${position} Job - ${company} - ${city} - Jobs For IT`;
        const description = ogDescription || `Working in IT: ${company} is looking for ${position}. Job ${city}.`;
        const image = ogImage ? ogImage.fields.file.url : logo.fields.file.url;
        data = data.replace(new RegExp(mainTitle,""g""), title);
        data = data.replace(new RegExp(mainDescription,""g""), description);
        data = data.replace(mainImage, ""https:"" + image);
        response.send(data);
      }).catch(err => {
      console.error(err);
      response.send(data);
    });
     });
});

// fixed client side urls: https://stackoverflow.com/questions/27928372/react-router-urls-dont-work-when-refreshing-or-writing-manually?page=2&tab=active#tab-top
app.get('/*', function(req, res) {
  res.sendFile(filePath, function(err) {
    if (err) {
      res.status(500).send(err)
    }
  })
})

app.listen(port, () => console.log(`Listening to you on port ${port}`));



",0.3615819209039548,0.9867812939414465,22.38302928559939
"modifiziere 

rsync_command = [
            ""rsync"", ""-abP"", ""--delete"", ""--delete-excluded"",
            ""--link-dest="" + previous_version_path,
            source_path, current_version_path
        ]

so, dass folgender fehler nichtmehr auftritt:

Traceback (most recent call last):
  File ""/usr/local/sbin/backup-to-usb.python"", line 62, in <module>
    main()
  File ""/usr/local/sbin/backup-to-usb.python"", line 44, in main
    ""--link-dest="" + previous_version_path,
    ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~
TypeError: can only concatenate str (not ""NoneType"") to str",0.288135593220339,0.486727219551169,12.0
getting a java  spring boot error in a docker container on kubernetes like this,0.10267857142857142,0.6077456552862057,25.079872407968907
"You are AI Junior, you code like Donald Knuth.

# Working set

./docs/config/env_or_cli.md:
```
# Junior Configuration

The Junior process can be started using the following commands:
- `npx junior-web [args]`
- `npx junior-cli [args]`
- For self-development from the git repo: `npm start -- [args]`.

## Configurations

- **--ignore, JUNIOR_IGNORE**
  - List of items to ignore in a comma-separated format.
  - Defaults to: .git, node_modules, ./prompt, and many more. Check the getIgnoreList function for the full default list.
  - The final ignore list is a combination of the default list, command line arguments, and environmental variables.
  - Example: --ignore=./pathToIgnore

- **--server-port, JUNIOR_SERVER_PORT**
  - The port for the server.
  - Default: 10101
  - Example: --server-port=8080

- **--host**
  - Host configuration. If provided without a value, it enables the host. Otherwise, specify an IP.
  - Example: --host or --host=192.168.1.2

- **-d, --dry-run** (CLI Only)
  - Runs the application in dry run mode. Please note: the CLI is not fully functional at this time.

- **--model**
  - Specifies the model to be used.
  - Default: gpt-4
  - Example: --model=gpt-5

- **--noaudit**
  - Disables the audit trail.

- **--frontend-port, JUNIOR_FRONTEND_PORT**
  - The port for the frontend.
  - Default: 5864
  - Example: --frontend-port=8081

- **--system-prompt, -s** (CLI Only)
  - Forces the system prompt. Please note: the CLI is not fully functional at this time.

## Examples

### Hosting on a VPN IP
```
npx junior-web --host=192.168.1.2
```

### Ignoring a Directory from Attention Scan
```
npx junior-cli --ignore=./myDirectory
```


```
./docs/web.md:
```
# Web Interface

Junior's web interface was designed for use with ChatGPT Pro and doesn't require an API key.

## Architecture

The web interface is composed of two different servers: a frontend and a backend. The frontend server runs on port 5864, and the backend server runs on port 10101.

## Starting the Web Interface

Run the application with `npx junior-web` from your project or with `npm start` from Junior itself. A web browser window will automatically open at `http://localhost:5864`, which is where you can access the web interface.

For configuration options and details, refer to the [Configuration](./config/env_or_cli.md) documentation.

## Workflow

The typical workflow begins with editing the `prompt.yaml` file in your code editor of choice (we recommend Visual Studio Code with the Junior plugin for an optimal experience). Once you're satisfied with your task setup, you proceed to the web interface for execution and monitoring.

## Usage

The web interface has a few interactive components:

![Web Interface](./screenshot.png)

- **Generate & Copy Prompt button (Blue)**: Click this to generate a task prompt based on your `prompt.yaml` file and copy it to your clipboard. The copied prompt should be pasted to ChatGPT 4 or similar for execution.

- **Paste & Execute Change button (Orange)**: Paste the response from the AI model (a shell script) into the input field and click this button to execute the changes.

- **Roll Back to Last Commit button (Red)**: If you made a mistake or aren't happy with the changes, click this button to revert to the last commit. Please note, the rollback operation preserves the `prompt.yaml` file, but drops every change since the last commit, including new files created in the meantime, even if they were not created by Junior.

- **Commit Changes button (Green)**: After you're satisfied with your changes, click this button to commit your modifications to git.

- **Terminal**: Displays the output of your command execution. It's a simple console that shows the progress of the task.

For a more detailed guide on using the web interface, refer to our video tutorial [here](https://youtu.be/W_iwry8uT7E).

Remember, you can always refer to your `prompt.yaml` file to modify the task details or attention mechanism.

Happy developing with your AI contributor!

```

# Task

Improve the documentation!

- npx is not needed to run Junior, the commands are on the path after install now.
- Remove mentions of npm start from the repo this is a separate workflow that we will document elsewhere

Do NOT create backup files.

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END

",0.11133603238866396,0.6159419088389275,39.02563260217571
"You are AI Junior, you code like Donald Knuth.

# Working set

./docs/README.md:
```
# Junior - Your AI-first IDE 

[![Video: Junior codes itself](/assets/video_cover.jpg)](https://youtu.be/NL4uFJSvfW0)

*""Video: Junior codes itself""*

Junior is an **AI-first IDE** designed specifically for professional programmers who have a preference for customizing and fine-tuning their tools. 

With Junior, developers get a unique space where they can work hand-in-hand with AI throughout the development process. By using structured task descriptors and spotlighting relevant parts of a project, tasks like code implementation, documentation, and testing can be seamlessly delegated to Junior.

At its core, Junior embraces a design philosophy that prioritizes simplicity, configurability, and auditability. This ensures that the platform remains both accessible to its users and adaptable to a variety of use-cases.

Junior has been crafted exclusively with AI-powered coding right from its early days, way before its core functionalities were in place. This demonstrates Junior's pioneering approach to harnessing the potential of artificial intelligence in software development.

## Getting Started

For guidance on using Junior, please refer to [usage.md](usage.md).

## Contributing and Support

Your contributions make a difference! At Junior, we value the collaboration of the community. Your role as a contributor is to monitor the development, provide detailed prompts, and thoroughly review the generated outcomes.

For questions or assistance, please raise an issue in our GitHub repository.

**Note:** We've tested Junior primarily with the GPT-4 model. However, you're welcome to experiment with similarly capable models and share your findings. It's not compatible with GPT-3.5.

```
./docs/usage.md:
```
# Developing External Projects with Junior

## Installation

Install Junior as a development dependency by running the following command:

```
npm add @aijunior/dev --save-dev
```
Additionally, you can install the ""Junior"" vscode extension from the vscode extension marketplace.

## Initialization

You can initialize the necessary files in the repository with the command:

```
npx junior-init
```

This will create the following files:

```
.gitignore
prompt/projectSpecifics.md
prompt.yaml
```

The Task Interaction Files (TIF) will be gitignored:
  - `prompt.yaml`, the prompt descriptor filled by the user ([descriptor.md](./descriptor.md))
  - `prompt.md`, the generated prompt by Junior
  - `change.sh`, the changeset generated by the language model

### Project Specifics

`prompt/projectSpecifics.md` is used to provide instructions about the codebase that Junior is working on, like preferred tools. It is important to keep this file minimal as it will be included in most prompts, and unnecessary complexity may result in the language model losing track and failing to solve the task.

## Starting Junior

You can start Junior with:

```
npx junior-web
```

For more information about the web interface, please refer to [web.md](./web.md).

```

# Task

Improve the documentation!

Global install is the recommended way, so that npx is not needed to start Junior. The user has to run junior-web in the project they want to work on. Update the docs!
Also fix the naming issue: The paid ChatGPT is calles Plus, not Pro.

Do NOT create backup files.

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END

",0.5239130434782608,0.8920711178648644,31.25699921617557
"You are AI Junior, you code like Donald Knuth.

# Working set

./src/frontend/components/terminal/TerminalComponent.jsx:
```
import { onCleanup, onMount } from 'solid-js';
import 'xterm/css/xterm.css';
import terminalConnection from '../../service/terminal/terminalConnection';
import { setupXTerm } from '../../service/terminal/setupXTerm';
import { sendTerminalResizeNotification } from '../../service/terminal/sendTerminalResizeNotification';
import DetailsComponent from '../DetailsComponent';
import VirtualKey from './VirtualKey';
import terminalVirtualKeyBindings from '../../config/terminalVirtualKeyBindings';

const TerminalComponent = () => {
  let container;
  const { term, fitAddon } = setupXTerm();

  const sendVirtualKey = (key) => {
    terminalConnection.sendDataToTerminal(JSON.stringify({ type: 'input', data: key }));
    term.focus();
  };

  onMount(() => {
    term.open(container);
    fitAddon.fit();

    const { rows, cols } = term;
    sendTerminalResizeNotification(rows, cols);

    terminalConnection.setOnDataReceived((data) => {
      term.write(data);
    });

    term.onData((data) => {
      terminalConnection.sendDataToTerminal(JSON.stringify({ type: 'input', data }));
    });

    term.onResize(({ newRows, newCols }) => {
      sendTerminalResizeNotification(newRows, newCols);
    });
  });
  
  onCleanup(() => {
    term.dispose();
    terminalConnection.closeConnection();
  });

  return (
    <DetailsComponent 
      defaultState=""closed""
      localStorageKey=""terminalState""
      generateHeader={() => ""Terminal""}
      classes=""rounded border p-2 w-full border-border bg-emphasize""
    >
      <div ref={container}></div>
      <div class=""flex overflow-x-auto whitespace-nowrap"">
        {terminalVirtualKeyBindings().map(({ label, action }) => (
          <VirtualKey label={label} action={() => sendVirtualKey(action)} />
        ))}
      </div>
    </DetailsComponent>
  );
};

export default TerminalComponent;

```

# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Create a TerminalSummary component and use it as the details summary. It should get a string prop ""lastWritten"", find the last line of the input and render it reactively. Use a span, not a div for making it inline.
Add the summary component after the ""Terminal"" text in the summary.


## Project Specifics

- Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

Write concise, self-documenting and idiomatic ES6 code!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END

",0.37971014492753624,0.9883525964687634,18.894443627691185
"You are AI Junior, you code like Donald Knuth.

# Working set

./docs/roadmap.md:
```
# Roadmap

## Usability & fixes
`v0.2 (Released: Aug 2023)`
- ✅ Done: Implement the four buttons
- ✅ Done: Fix every major bug
- ✅ Done: Write docs to allow using Junior for developing external projects

## Programming on mobile
`v0.3 (Expected: Q4 2023)`
- 🚧 Develop a file browser to allow the user to select attention files from mobile
- Allow secure hosting
- Create an app by wrapping the frontend
- Test it by developing at the local Playground and while commuting

## Plugin system
`v0.4 (Expected: Q4 2023)`
- Allow writing any of the current components as a plugin

## Auto-attention
`v0.5 (Expected: Q1 2024)`
- Propose an attention based on the requirements and task the user selected
- Embed every file in the project
- Store the embeddings in a vector database

## Prompt herds
`v0.6 (Expected: Q2 2024)`
- Scan and transform (refactor) the codebase gradually

```
./.gitignore:
```
/secret.sh
/node_modules/
/tmp/
/prompt.yaml
/prompt.md
/change.sh

node_modules
# Backup patterns for .md files
*.md.backup
*.md.bak
*.md~
*.md.tmp
*.md.old
*.md.orig
*.md.save

```

# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

1. Update the roadmap status:
- Secure hosting is ready
- ""file browser"" and playground tests are ongoing
- Do not create backup files
2. gitignore *_backup.md files


## Project Specifics

- Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

Write concise, self-documenting and idiomatic code!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END

",0.45689655172413796,0.8127359022476017,13.856406460551018
"You are AI Junior, you code like Donald Knuth.

# Working set

./src/frontend/components/GitStatusRow.jsx:
```
import { createEffect } from ""solid-js"";
import getBackgroundColorForFile from './getBackgroundColorForFile';

const GitStatusRow = (props) => {
  const { index, path, working_dir } = props.entry;
  const { onClick } = props;

  const splitPath = path.split('/');
  const fileName = splitPath.pop();
  const baseDir = splitPath.join('/');

  const bgColor = getBackgroundColorForFile(index, path);

  let pathRef;

  createEffect(() => {
    if (pathRef) {
      pathRef.scrollLeft = pathRef.scrollWidth;
    }
  });

  return (
    <div class={`flex ${bgColor ? 'bg-' + bgColor : ''}`} onClick={() => onClick(path)}>
      <span class=""w-50px overflow-x-auto p-1"">{index + ' ' + working_dir}</span>
      <span class=""text-base bg-main rounded p-1"">{fileName}</span>
      <span ref={pathRef} class=""overflow-x-auto whitespace-no-wrap break-keep scrollbar-hidden ml-4 py-2 text-sm"">{baseDir}</span>
    </div>
  );
};

export default GitStatusRow;

```
./src/frontend/components/getBackgroundColorForFile.jsx:
```
export default function getBackgroundColorForFile(index, path) {
  if (index === 'M') { // Modified files
    return 'rgb(34 197 94)';
  } else if (index === 'A' && !path.includes('prompt/history')) { // New files excluding ones with 'prompt/history' in path
    return 'rgb(253 186 116)';
  }
  return ''; // Default no background color
}

```

# Task

Fix the following issue!

In git status, file background color values are rgb, set them as background color styles, not classes in git status
Also rename the file and fn to file getStyleForFileStatus


## Project Specifics

- Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END

",0.4678111587982833,0.9160293895342527,18.788294228055936
"You are AI Junior, you code like Donald Knuth.

# Working set

./src/frontend/components/MultiSelect/MultiSelect.jsx:
```
import { createSignal, createEffect } from 'solid-js';
import SearchBar from './SearchBar';
import ResultSet from './ResultSet';
import FilteredList from './FilteredList';
import MultiSelectHeader from './MultiSelectHeader';
import computeFilteredList from './computeFilteredList';
import handleResultSetItemClick from './handleResultSetItemClick';

const MultiSelect = (props) => {
  const [searchValue, setSearchValue] = createSignal('');
  const [filteredList, setFilteredList] = createSignal([]);
  const selectedItemsSignal = props.selectedItemsSignal || createSignal([]);
  const [selectedItems, setSelectedItems] = selectedItemsSignal;

  createEffect(() => {
    const currentQuery = searchValue() || props.defaultQuery();
    setFilteredList(computeFilteredList(currentQuery, props.availableItems, props.compare, props.itemCount, selectedItems(), props.defaultQuery()));
  });

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      const updatedItems = [...selectedItems(), filteredList()[0]];
      setSelectedItems(updatedItems);
    }
  };

  const handleFilterListItemClick = (item) => {
    const updatedItems = [...selectedItems(), item];
    setSelectedItems(updatedItems);
  };

  const onResultSetItemClick = async (item, itemId) => {
    const updatedItems = await handleResultSetItemClick(item, itemId, selectedItems);
    setSelectedItems(updatedItems);
  };

  const handleClearSelection = () => {
    setSelectedItems([]);
  };

  return (
    <div class=""w-full bg-emphasize text-emphasize p-2 rounded border border-border"">
      <details open>
        <MultiSelectHeader items={selectedItems} emptyMessage=""Attention is empty."" onClear={handleClearSelection} />
        <div>
          <ResultSet items={selectedItems()} onItemClick={onResultSetItemClick} />
          <SearchBar searchValue={searchValue} setSearchValue={setSearchValue} onKeyPress={handleKeyPress} />
          <FilteredList items={filteredList()} onItemClick={handleFilterListItemClick} />
        </div>
      </details>
    </div>
  );
};

export default MultiSelect;

```
./src/frontend/components/MultiSelect/computeFilteredList.js:
```
import computeRank from './computeRank';

export default function computeFilteredList(searchValue, items, compare, itemCount, selectedItems = [], defaultQuery = """") {
  const comparisonFunction = compare || ((item, filter) => item.includes(filter) ? filter.length : 0);
  
  return items
    .filter(item => !selectedItems.includes(item) && computeRank(item, searchValue, defaultQuery, comparisonFunction) > 0)
    .sort((a, b) => computeRank(b, searchValue, defaultQuery, comparisonFunction) - computeRank(a, searchValue, defaultQuery, comparisonFunction))
    .slice(0, itemCount);
}

```
./src/frontend/components/AttentionFileList.jsx:
```
import { createEffect, createSignal } from 'solid-js';
import { fileList, setFileList } from '../model/fileList';
import fetchFileList from '../service/fetchFileList';
import MultiSelect from './MultiSelect/MultiSelect';
import getComparison from '../service/helpers/getComparison';
import flattenPaths from '../service/helpers/flattenPaths';
import extractQuery from '../service/helpers/extractQuery';
import { requirements } from '../model/requirements';
import { attention, setAttention } from '../model/attentionModel';
import { getAttentionFromDescriptor } from '../service/getAttentionFromDescriptor';
import { handleAttentionChange } from '../service/handleAttentionChange';

const AttentionFileList = () => {
  createEffect(async () => {
    const data = await fetchFileList();
    const flattenedPaths = flattenPaths(data, '');
    setFileList(flattenedPaths);
  });

  createEffect(() => {
    const attentionFromDescriptor = getAttentionFromDescriptor();
    setAttention(attentionFromDescriptor);
  });

  const [defaultQuery, setDefaultQuery] = createSignal("""");

  createEffect(() => {
    setDefaultQuery(extractQuery(requirements()));
  });

  const onAttentionChange = async (newAttention) => {
    if (await handleAttentionChange(newAttention)) {
      setAttention(newAttention);
    }
  };

  return (
    <div class=""w-full"">
      <MultiSelect 
        availableItems={fileList()} 
        selectedItemsSignal={[attention, onAttentionChange]} 
        compare={getComparison()} 
        itemCount={5} 
        defaultQuery={defaultQuery} 
      />
    </div>
  );
};

export default AttentionFileList;

```
./src/frontend/service/helpers/extractQuery.js:
```
const ignoreList = ['and', 'or', 'the'];

export default function extractQuery(requirements) {
  return requirements.split(/\W+/)
    .filter(word => word.length > 2 && !ignoreList.includes(word.toLowerCase()))
    .join(' ');
}

```
./src/frontend/service/helpers/getComparison.js:
```
const getComparison = () => {
  return (item, filter) => {
    const filterWords = filter.split(/\s+/).map(word => word.toLowerCase());
    const lowercasedItem = item.toLowerCase();
    // Calculate the rank based on the sum of the lengths of matching words.
    const rank = filterWords.reduce((acc, word) => lowercasedItem.includes(word) ? acc + word.length : acc, 0);
    return rank;
  };
};

export default getComparison;

```

# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

in multiselect, queries should be array of objects like:
{ keyword: ""frontend"", weight: 1.0 }

Modify extractQuery to return such an array.
Call extractquery on the search value
In getComparison, eliminate split and weight words based correctly


## Project Specifics

- Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END

",0.1076923076923077,0.1520891095988154,39.93745109543172
"You are AI Junior, you code like Donald Knuth.

# Working set

./src/frontend/service/terminal/terminalConnection.js:
```
import { createWebSocket } from '../createWebSocket';

const socket = createWebSocket('/terminal');

const sendDataToTerminal = (data) => {
  if (socket.readyState === WebSocket.OPEN) {
    socket.send(data);
  }
};

const setOnDataReceived = (callback) => {
  socket.onmessage = (event) => {
    callback(event.data);
  };
};

const closeConnection = () => {
  if (socket.readyState === WebSocket.OPEN) {
    socket.close();
  }
};

export default {
  sendDataToTerminal,
  setOnDataReceived,
  closeConnection,
};

```

# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Terminalconnection should queue and send early messages.


## Project Specifics

- Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: Debian


Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END

",0.301255230125523,0.846979071638507,24.331050121192877
"You are AI Junior, you code like Donald Knuth.
# Working set

./src/backend/terminal/setupTerminalServer.js:
```
import { spawn } from 'child_process';

export default function setupTerminalServer(socket) {
  console.log(""Setting up terminal server..."");

  const shell = spawn('/bin/sh');

  socket.on('message', (data) => {
    console.log(""Received message:"", data.toString());
    shell.stdin.write(data);
  });

  shell.stdout.on('data', (data) => {
    console.log(""Shell output:"", data.toString());
    socket.send(data);
  });

  shell.stderr.on('data', (data) => {
    console.log(""Shell error output:"", data.toString());
    socket.send(data);
  });

  shell.on('exit', () => {
    console.log(""Shell exited"");
    socket.close();
  });
}

```

./src/backend/startServer.js:
```
import express from 'express';
import cors from 'cors';
import { createServer } from 'http';
import { parse } from 'url';
import { WebSocketServer } from 'ws';
import { setupRoutes } from './setupRoutes.js';
import { notifyOnFileChange } from './notifyOnFileChange.js';
import { getServerPort } from './serverConfig.js';
import hostConfig from '../config/hostConfig.js';
import terminalRoutes from './terminal/terminalRoutes.js';

export function startServer() {
  const app = express();

  app.use(cors());
  app.use(express.json());

  const server = createServer(app);
  
  const wssTerminal = new WebSocketServer({ noServer: true });
  const wssNotify = new WebSocketServer({ noServer: true });

  notifyOnFileChange(wssNotify);
  
  terminalRoutes(wssTerminal);

  server.on('upgrade', function upgrade(request, socket, head) {
    const { pathname } = parse(request.url);
    if (pathname === '/terminal') {
      wssTerminal.handleUpgrade(request, socket, head, function done(ws) {
        wssTerminal.emit('connection', ws, request);
      });
    } else if (pathname === '/') {
      wssNotify.handleUpgrade(request, socket, head, function done(ws) {
        wssNotify.emit('connection', ws, request);
      });
    } else {
      socket.destroy();
    }
  });

  setupRoutes(app);

  const { enabled, ip } = hostConfig();
  const port = getServerPort();
  server.listen(port, ip || (enabled ? '0.0.0.0' : undefined), () => {
    console.log('Server is running on port', port);
  });
}

```

./src/backend/terminal/terminalRoutes.js:
```
import setupTerminalServer from './setupTerminalServer.js';

export default function terminalRoutes(wss) {
  wss.on('connection', (socket) => {
    setupTerminalServer(socket);
  }, { path: '/terminal' });
}

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Install and use node-pty for creating terminals!

An example for your reference:
```
const WebSocket = require('ws')
var os = require('os');
var pty = require('node-pty');

const wss = new WebSocket.Server({ port: 6060 })

console.log(""Socket is up and running..."")

var shell = os.platform() === 'win32' ? 'powershell.exe' : 'bash';
var ptyProcess = pty.spawn(shell, [], {
    name: 'xterm-color',
    //   cwd: process.env.HOME,
    env: process.env,
});
wss.on('connection', ws => {
    console.log(""new session"")
    ws.on('message', command => {
        ptyProcess.write(command);
    })

    ptyProcess.on('data', function (data) {
        ws.send(data)
        console.log(data);

    });
})
```



## Project Specifics

- Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END


",0.1606425702811245,0.3886004282655008,24.939927826679853
"You are AI Junior, you code like Donald Knuth.
# Working set

./src/frontend/service/terminal/terminalConnection.js:
```
import { createWebSocket } from '../createWebSocket';

const socket = createWebSocket();

const sendDataToTerminal = (data) => {
  if (socket.readyState === WebSocket.OPEN) {
    socket.send(data);
  }
};

const setOnDataReceived = (callback) => {
  socket.onmessage = (event) => {
    callback(event.data);
  };
};

const closeConnection = () => {
  if (socket.readyState === WebSocket.OPEN) {
    socket.close();
  }
};

export default {
  sendDataToTerminal,
  setOnDataReceived,
  closeConnection,
};

```

./src/frontend/service/createWebSocket.js:
```
import { getBaseUrl } from '../getBaseUrl.js';

export const createWebSocket = () => {
  const baseUrl = getBaseUrl();
  const wsUrl = baseUrl.replace(/^http/, 'ws');
  const ws = new WebSocket(wsUrl);
  return ws;
};

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

- Allow createwebsocket to handle optional path (default ""/"" ) for the connection
- Connect to /terminal as the terminal connection.
- Do not change existing exports even if they are non-conformant.


## Project Specifics

- Every js file should *only export a single function or signal, as default*! eg.: in createGitRepo.js: export default function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END


",0.052132701421800945,0.43101824271241856,24.55605831561735
"You are AI Junior, you code like Donald Knuth.
# Working set

./src/frontend/service/createWebSocket.js:
```
import { getBaseUrl } from '../getBaseUrl.js';

export const createWebSocket = () => {
  const baseUrl = getBaseUrl();
  const wsUrl = baseUrl.replace(/^http/, 'ws');
  const ws = new WebSocket(wsUrl);
  return ws;
};

```

./src/frontend/App.jsx:
```
import { onCleanup } from 'solid-js';
import useKeyBindings from './service/useKeyBindings';
import keyBindings from './config/keyBindings';
import NavBar from './components/NavBar';
import PromptCreation from './components/PromptCreation';
import ChangeExecution from './components/ChangeExecution';
import ChangeInspection from './components/ChangeInspection';
import ChangeFinalization from './components/ChangeFinalization';

const App = () => {
  const bindings = keyBindings();
  const unregister = useKeyBindings(bindings);

  onCleanup(unregister); 

  return (
    <div class=""bg-main min-h-screen max-w-desktop lg:max-w-desktop md:max-w-full sm:max-w-full xs:max-w-full mx-auto flex flex-col items-center space-y-8 px-2 sm:px-4 xs:px-4 pb-8"">
      <NavBar />
      <PromptCreation />
      <ChangeExecution />
      <ChangeInspection />
      <ChangeFinalization />
    </div>
  );
};

export default App;

```

./src/frontend/components/SampleComponent.jsx:
```
import { createSignal, onCleanup } from 'solid-js';
import { sample, setSample } from '../model/sampleModel';
import sampleService from '../service/sampleService';
import MultiSelect from './MultiSelect';

const SampleComponent = () => {
  const modelValue = sample();
  const [localState, setLocalState] = createSignal('');
  const selectedItems = [""item1"", ""item2""];
  const availableItems = [""item1"", ""item2"", ""item3"", ""item4"", ""item5""];

  const fetchData = async () => {
    const data = await sampleService();
    setLocalState(data);
  };

  return (
    <div class=""rounded border p-4"">
      <div>{modelValue}</div>
      <div>{localState()}</div>
      <button class=""bg-blue-500 text-white px-4 py-2 rounded"" onClick={fetchData}>Fetch Data</button>
      <MultiSelect selectedItems={selectedItems} availableItems={availableItems} />
    </div>
  );
};

export default SampleComponent;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

1. xterm.js is installed, create a component to utilize it!
2. Add it to the end of the app.


## Project Specifics

- Every js file should *only export a single function or signal, as default*! eg.: in createGitRepo.js: export default function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END


",0.1337386018237082,0.28860754230742813,31.52776554086889
"You are AI Junior, you code like Donald Knuth.
# Working set

./src/frontend/components/RequirementsEditor.jsx:
```
import { createSignal, createEffect } from 'solid-js';
import postDescriptor from '../service/postDescriptor';
import { promptDescriptor, setPromptDescriptor } from '../model/promptDescriptor'; 
import { requirements, setRequirements } from '../model/requirements';
import { getYamlEntry } from '../service/getYamlEntry';
import isBetaEnabled from '../service/config/isBetaEnabled'; 
import jsyaml from 'js-yaml'; 
import AutoGrowingTextarea from './AutoGrowingTextarea';

const RequirementsEditor = () => {
  const [isBeta, setIsBeta] = createSignal(false);

  const init = async () => {
    const betaStatus = await isBetaEnabled();
    setIsBeta(betaStatus);
  };

  createEffect(init);

  const handleInput = (e) => {
    const descriptor = promptDescriptor();
    const parsed = jsyaml.load(descriptor);
    parsed.requirements = e.target.value; 
    const updatedDescriptor = jsyaml.dump(parsed);
    setPromptDescriptor(updatedDescriptor);
  };

  const handleChange = async (e) => {
    handleInput(e);
    const currentRequirements = e.target.value;
    await postDescriptor({ requirements: currentRequirements });
  };

  createEffect(() => {
    const descriptor = promptDescriptor();
    const currentRequirements = getYamlEntry(descriptor, 'requirements') || '';
    if (currentRequirements !== requirements()) {
      setRequirements(currentRequirements);
    }
  });

  return (
    <div class=""w-full flex justify-start bg-emphasize text-emphasize p-1 rounded border border-border mt-2"">
      <AutoGrowingTextarea
        class=""w-full bg-emphasize text-emphasize text-lg px-2""
        placeholder={isBeta() ? ""Enter your requirements..."" : ""This is disabled for now. Call with 'npx junior-web -- --beta' to enable.""}
        valueSignal={requirements}
        onInput={e => handleInput(e)}
        onChange={e => handleChange(e)}
        disabled={!isBeta()}
      />
    </div>
  );
};

export default RequirementsEditor;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Requirements editor is out of beta, eliminate every beta-related check and just work.


## Project Specifics

- Every js file should *only export a single function or signal, as default*! eg.: in createGitRepo.js: export default function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END


",0.12430939226519337,0.13663043720455686,27.94637722496424
"You are AI Junior, you code like Donald Knuth.
# Working set

./src/frontend/components/GitStatusDisplay.jsx:
```
import { onMount, createEffect } from 'solid-js';
import getBackgroundColorForFile from './getBackgroundColorForFile';
import { gitStatus } from '../model/gitStatus';
import { fetchGitStatus } from '../service/fetchGitStatus';

const GitStatusDisplay = () => {
  let statusContainer;

  onMount(fetchGitStatus);

  createEffect(() => {
    const gitStatusValue = gitStatus();
    if (gitStatusValue) {
      if (gitStatusValue.error) {
        statusContainer.innerText = `${gitStatusValue.message}\n${gitStatusValue.error.stderr}`;
      } else if (gitStatusValue.data && gitStatusValue.data.files && gitStatusValue.data.files.length > 0) {
        statusContainer.innerHTML = gitStatusValue.data.files.map(entry => {
          const { index, path, working_dir } = entry;
          const bgColor = getBackgroundColorForFile(index, path);
          return `<div class=""grid grid-cols-3 ${bgColor ? 'bg-' + bgColor : ''}"">
                    <span class=""col-span-1 w-50px"">${index}</span>
                    <span class=""col-span-1 w-60%"">${path}</span>
                    <span class=""col-span-1"">${working_dir}</span>
                  </div>`;
        }).join('');
      }
    }
  });

  return (
    <pre
      ref={statusContainer}
      class={`rounded overflow-auto max-w-full ${gitStatus() && gitStatus().data && gitStatus().data.files && gitStatus().data.files.length > 0 ? 'block' : 'hidden'}`}
    />
  );
};

export default GitStatusDisplay;

```


# Task

Refactor!

Factor the rendering of a single row out to
GitStatusRow.jsx
While doing so, also eliminate innerHTML use!
Render normally, using jsx/solid.
Simplify, if possible.


## Project Specifics

- Every js file should *only export a single function or signal, as default*! eg.: in createGitRepo.js: export default function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END


",0.4779874213836478,0.9925679342579714,9.643650760992955
"You are AI Junior, you code like Donald Knuth.
# Working set

./src/frontend/components/GitStatusDisplay.jsx:
```
import { onMount, createEffect } from 'solid-js';
import { gitStatus } from '../model/gitStatus';
import { fetchGitStatus } from '../service/fetchGitStatus';

const GitStatusDisplay = () => {
  let statusContainer;

  onMount(fetchGitStatus);

  createEffect(() => {
    const gitStatusValue = gitStatus();
    if (gitStatusValue) {
      if (gitStatusValue.error) {
        statusContainer.innerText = `${gitStatusValue.message}\n${gitStatusValue.error.stderr}`;
      } else if (gitStatusValue.data && gitStatusValue.data.files && gitStatusValue.data.files.length > 0) {
        statusContainer.innerHTML = gitStatusValue.data.files.map(entry => {
          const { index, path, working_dir } = entry;
          return `<div class=""grid grid-cols-3"">
                    <span class=""col-span-1"">${index}</span>
                    <span class=""col-span-1"">${path}</span>
                    <span class=""col-span-1"">${working_dir}</span>
                  </div>`;
        }).join('');
      }
    }
  });

  return (
    <pre
      ref={statusContainer}
      class={`rounded overflow-auto max-w-full ${gitStatus() && gitStatus().data && gitStatus().data.files && gitStatus().data.files.length > 0 ? 'block' : 'hidden'}`}
    />
  );
};

export default GitStatusDisplay;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

1. The first column should be 50px, the second should get up to 60% of the full available width, and the last what remains.
2. Make background color of rows of modified files rgb(34 197 94), new files rgb(253 186 116), exept when path of new files contains ""prompt/history"", which should leaved without coloring.


## Project Specifics

- Every js file should *only export a single function or signal, as default*! eg.: in createGitRepo.js: export default function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END


",0.4945652173913043,0.9968789387211608,14.730919862656235
"You are AI Junior, you code like Donald Knuth.
# Working set

./src/backend/handlers/fileListHandler.js:
```
import readFileList from '../fileutils/readFileList.js';

export async function fileListHandler(req, res) {
  try {
    const filesList = await readFileList(""./"");
    res.json(filesList);
  } catch (error) {
    res.status(500).json({ error: 'Failed to list files' });
  }
}

```

./src/backend/handlers/fileReadHandler.js:
```
import fs from 'fs';
import { promisify } from 'util';

const readFileAsync = promisify(fs.readFile);

export async function fileReadHandler(req, res) {
  const { filepath } = req.params;

  if (!filepath) {
    return res.status(400).send({ error: 'File path is required' });
  }

  try {
    const fileContent = await readFileAsync(filepath, 'utf8');
    res.send(fileContent);
  } catch (error) {
    res.status(500).send({ error: 'Unable to read file' });
  }
}

```

./src/backend/setupRoutes.js:
```
import { setupGitRoutes } from './routes/setupGitRoutes.js';
import { setupPromptRoutes } from './routes/setupPromptRoutes.js';
import { executeHandler } from './handlers/executeHandler.js';
import { configHandler } from './handlers/configHandler.js';
import { fileListHandler } from './handlers/fileListHandler.js';
import { fileReadHandler } from './handlers/fileReadHandler.js';  // Added this line

export function setupRoutes(app) {
  setupPromptRoutes(app);
  setupGitRoutes(app);
  app.post('/execute', executeHandler);
  app.get('/config', configHandler);
  app.get('/files/list/', fileListHandler);
  app.get('/files/read/:filepath', fileReadHandler); // Added this line
}

```


# Task

Refactor!

Move files-prefixed routes to setupFilesRoutes.js
Move the related handlers to handlers/files/ 
Create the dir.


## Project Specifics

- Every js file should *only export a single function or signal*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END


",0.4215686274509804,0.9076587777022022,28.548204847240395
"You are AI Junior, you code like Donald Knuth.
# Working set

/./src/frontend/components/MultiSelect/MultiSelectHeader.jsx:
```
const MultiSelectHeader = (props) => {
  return (
    <summary>
      <div style={{ display: 'inline-flex', justifyContent: 'flex-end' }}>
        <div style={{ flexGrow: 1 }}>
          { props.items().length > 0 ? `${props.items().length} files in attention` : props.emptyMessage }
        </div>
        { props.items().length > 0 && 
          <span class=""cursor-pointer ml-2"" onClick={props.onClear}>
            🗑
          </span>
        }
      </div>
    </summary>
  );
};

export default MultiSelectHeader;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

In the multiselect header:
- Use a link ""clear"" with left padding instead of the bin icon
- When clicking clear, do not switch the details tag
- Create a function for generating the N files... msg and ensure it print grammatically correct msg for 1 file too.


## Project Specifics

- Every js file should *only export a single function or signal*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.3710691823899371,0.9925829224494903,12.0
"You are AI Junior, you code like Donald Knuth.
# Working set

/./src/frontend/components/CommitButton.jsx:
```
import { postCommit } from '../service/postCommit';
import postDescriptor from '../service/postDescriptor';
import { commitMessage } from '../model/commitMessage';
import { fetchGitStatus } from '../service/fetchGitStatus';
import clearState from '../service/clearState';

const CommitButton = () => {
  const handleCommit = async () => {
    const response = await postCommit(commitMessage());
    console.log(response.message);
    
    await postDescriptor({ requirements: '', attention: '' });
    
    const status = await fetchGitStatus();
    console.log(status);
    clearState();
  };

  return (
    <button className=""w-full px-4 py-4 bg-green-500 text-lg text-bg font-semibold rounded"" onClick={handleCommit}>Commit</button>
  );
};

export default CommitButton;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Do not clear the attention after commit


## Project Specifics

- Every js file should *only export a single function or signal*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.6842105263157895,0.9823901793306815,5.385164807134504
"You are AI Junior, you code like Donald Knuth.
# Working set

/./src/frontend/components/MultiSelect/MultiSelect.jsx:
```
import { createSignal, createEffect } from 'solid-js';
import SearchBar from './SearchBar';
import ResultSet from './ResultSet';
import FilteredList from './FilteredList';
import computeFilteredList from './computeFilteredList';
import handleResultSetItemClick from './handleResultSetItemClick';

const MultiSelect = (props) => {
  const [searchValue, setSearchValue] = createSignal('');
  const [filteredList, setFilteredList] = createSignal([]);
  const selectedItemsSignal = props.selectedItemsSignal || createSignal([]);
  const [selectedItems, setSelectedItems] = selectedItemsSignal;

  createEffect(() => {
    const currentQuery = searchValue() || props.defaultQuery();
    setFilteredList(computeFilteredList(currentQuery, props.availableItems, props.compare, props.itemCount, selectedItems(), props.defaultQuery()));
  });

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      const updatedItems = [filteredList()[0], ...selectedItems()];
      setSelectedItems(updatedItems);
    }
  };

  const handleFilterListItemClick = (item) => {
    const updatedItems = [item, ...selectedItems()];
    setSelectedItems(updatedItems);
  };

  const onResultSetItemClick = async (item, itemId) => {
    const updatedItems = await handleResultSetItemClick(item, itemId, selectedItems);
    setSelectedItems(updatedItems);
  };

  return (
    <div class=""w-full bg-emphasize text-emphasize p-2 rounded border border-border"">
      <ResultSet items={selectedItems()} onItemClick={onResultSetItemClick} emptyMessage=""Attention is empty."" />
      <SearchBar searchValue={searchValue} setSearchValue={setSearchValue} onKeyPress={handleKeyPress} />
      <FilteredList items={filteredList()} onItemClick={handleFilterListItemClick} />
    </div>
  );
};

export default MultiSelect;

```

/./src/frontend/components/AttentionFileList.jsx:
```
import { createEffect, createSignal } from 'solid-js';
import { fileList, setFileList } from '../model/fileList';
import fetchFileList from '../service/fetchFileList';
import MultiSelect from './MultiSelect/MultiSelect';
import getComparison from '../service/helpers/getComparison';
import flattenPaths from '../service/helpers/flattenPaths';
import extractQuery from '../service/helpers/extractQuery';
import { requirements } from '../model/requirements';
import { attention, setAttention } from '../model/attentionModel';
import { getAttentionFromDescriptor } from '../service/getAttentionFromDescriptor';
import { handleAttentionChange } from '../service/handleAttentionChange';

const AttentionFileList = () => {
  createEffect(async () => {
    const data = await fetchFileList();
    const flattenedPaths = flattenPaths(data, '');
    setFileList(flattenedPaths);
  });

  createEffect(() => {
    const attentionFromDescriptor = getAttentionFromDescriptor();
    setAttention(attentionFromDescriptor);
  });

  const [defaultQuery, setDefaultQuery] = createSignal("""");

  createEffect(() => {
    setDefaultQuery(extractQuery(requirements()));
  });

  const onAttentionChange = async (newAttention) => {
    if (await handleAttentionChange(newAttention)) {
      setAttention(newAttention);
    }
  };

  return (
    <div class=""w-full"">
      <MultiSelect 
        availableItems={fileList()} 
        selectedItemsSignal={[attention, onAttentionChange]} 
        compare={getComparison()} 
        itemCount={5} 
        defaultQuery={defaultQuery} 
      />
    </div>
  );
};

export default AttentionFileList;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Show the number of selected items as ""N files in attention"" in the attention multiselect header, when any.  Create MultiSelectHeader.jsx and move the current empty message to it too.


## Project Specifics

- Every js file should *only export a single function or signal*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.48031496062992124,0.9887433951400816,27.0
"You are AI Junior, you code like Donald Knuth.
# Working set

src/frontend/components/MultiSelect/MultiSelect.jsx:
```
import { createSignal, createEffect } from 'solid-js';
import SearchBar from './SearchBar';
import ResultSet from './ResultSet';
import FilteredList from './FilteredList';
import computeFilteredList from './computeFilteredList';
import handleResultSetItemClick from './handleResultSetItem';

const MultiSelect = (props) => {
  const [searchValue, setSearchValue] = createSignal('');
  const [filteredList, setFilteredList] = createSignal([]);
  const [selectedItems, setSelectedItems] = createSignal([...props.selectedItems]);

  createEffect(() => {
    const currentQuery = searchValue() || props.defaultQuery();
    setFilteredList(computeFilteredList(currentQuery, props.availableItems, props.compare, props.itemCount, selectedItems(), props.defaultQuery()));
  });

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      const updatedItems = [filteredList()[0], ...selectedItems()];
      setSelectedItems(updatedItems);
    }
  };

  const handleFilterListItemClick = (item) => {
    const updatedItems = [item, ...selectedItems()];
    setSelectedItems(updatedItems);
  };

  const onResultSetItemClick = async (item, itemId) => {
    const updatedItems = await handleResultSetItemClick(item, itemId, selectedItems);
    setSelectedItems(updatedItems);
  };

  return (
    <div class=""w-full bg-emphasize text-emphasize p-2 rounded border border-border"">
      <ResultSet items={selectedItems()} onItemClick={onResultSetItemClick} emptyMessage=""Attention is empty."" />
      <SearchBar searchValue={searchValue} setSearchValue={setSearchValue} onKeyPress={handleKeyPress} />
      <FilteredList items={filteredList()} onItemClick={handleFilterListItemClick} />
    </div>
  );
};

export default MultiSelect;

```

src/frontend/components/MultiSelect/handleResultSetItem.js:
```
const handleResultSetItemClick = async (item, itemId, selectedItems) => {
    const element = document.getElementById(itemId);
    if (element) {
        element.style.transition = ""opacity 0.5s, transform 0.5s"";
        element.style.opacity = ""0"";
        element.style.transform = ""translateX(-100%)"";
        await new Promise(resolve => setTimeout(resolve, 500));
    }
    const updatedItems = selectedItems().filter(selectedItem => selectedItem !== item);
    return updatedItems;
};

export default handleResultSetItemClick;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Rename the handler file to handleResultSetItemClick.js
Instead of translating, it should fade and shrink vertically, in 0.3 sec



## Project Specifics

- Every js file should *only export a single function or signal*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.12154696132596685,0.08428021891553651,32.802438933713454
"You are AI Junior, you code like Donald Knuth.
# Working set

src/frontend/components/MultiSelect/MultiSelect.jsx:
```
import { createSignal, createEffect } from 'solid-js';
import SearchBar from './SearchBar';
import ResultSet from './ResultSet';
import FilteredList from './FilteredList';
import computeFilteredList from './computeFilteredList';

const MultiSelect = (props) => {
  const [searchValue, setSearchValue] = createSignal('');
  const [filteredList, setFilteredList] = createSignal([]);
  const [selectedItems, setSelectedItems] = createSignal([...props.selectedItems]);

  createEffect(() => {
    const currentQuery = searchValue() || props.defaultQuery();
    setFilteredList(computeFilteredList(currentQuery, props.availableItems, props.compare, props.itemCount, selectedItems(), props.defaultQuery()));
  });

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      const updatedItems = [filteredList()[0], ...selectedItems()];
      setSelectedItems(updatedItems);
    }
  };

  const handleFilterListItemClick = (item) => {
    const updatedItems = [item, ...selectedItems()];
    setSelectedItems(updatedItems);
  };

  const handleResultSetItemClick = async (item, itemId) => {
    const element = document.getElementById(itemId);
    if (element) {
      element.style.transition = ""opacity 0.5s, transform 0.5s"";
      element.style.opacity = ""0"";
      element.style.transform = ""translateX(-100%)"";
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    const updatedItems = selectedItems().filter(selectedItem => selectedItem !== item);
    setSelectedItems(updatedItems);
  };

  return (
    <div class=""w-full bg-emphasize text-emphasize p-2 rounded border border-border"">
      <ResultSet items={selectedItems()} onItemClick={handleResultSetItemClick} emptyMessage=""Attention is empty."" />
      <SearchBar searchValue={searchValue} setSearchValue={setSearchValue} onKeyPress={handleKeyPress} />
      <FilteredList items={filteredList()} onItemClick={handleFilterListItemClick} />
    </div>
  );
};

export default MultiSelect;

```


# Task

Refactor!

factor out handleResultSetItem to its own .js file


## Project Specifics

- Every js file should *only export a single function or signal*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.26737967914438504,0.8760544965258741,23.769728648009426
"You are AI Junior, you code like Donald Knuth.
# Working set

src/frontend/components/MultiSelect/FilteredListItem.jsx:
```
import { createEffect } from ""solid-js"";

const FilteredListItem = (props) => {
  let itemRef;

  const handleClick = () => {
    if (typeof props.onItemClick === 'function') {
      props.onItemClick(props.item);
    }
  };

  createEffect(() => {
    if (itemRef) {
      itemRef.scrollLeft = itemRef.scrollWidth;
    }
  });

  // Split the path into filename and directory
  const [filename, ...pathParts] = props.item.split('/').reverse();
  const directory = pathParts.reverse().join('/');

  return (
    <div onClick={handleClick} class=""flex justify-between items-center w-full font-mono cursor-pointer"">
      <span class=""border-r border-border pl-2 pr-2"">{props.idx}</span>
      <span ref={itemRef} class=""overflow-x-auto whitespace-no-wrap break-keep scrollbar-hidden ml-4 py-2 text-xl"">{filename}</span>
      <span class=""ml-2"">{directory}</span>
    </div>
  );
};

export default FilteredListItem;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

1. Remove the numbering.
2. When there is not enough horizontal space, shrink the path first, not the filename.
3. Allow scrolling the path and scroll that (instead of the filename) to the right at load.



## Project Specifics

- Every js file should *only export a single function or signal*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.43356643356643354,0.97653698209332,12.0
"You are AI Junior, you code like Donald Knuth.
# Working set

src/frontend/components/MultiSelect/MultiSelect.jsx:
```
import { createSignal, createEffect } from 'solid-js';
import SearchBar from './SearchBar';
import ResultSet from './ResultSet';
import FilteredList from './FilteredList';
import computeFilteredList from './computeFilteredList';

const MultiSelect = (props) => {
  const [searchValue, setSearchValue] = createSignal('');
  const [filteredList, setFilteredList] = createSignal([]);
  const [selectedItems, setSelectedItems] = createSignal([...props.selectedItems]);

  createEffect(() => {
    const currentQuery = searchValue() || props.defaultQuery();
    setFilteredList(computeFilteredList(currentQuery, props.availableItems, props.compare, props.itemCount, selectedItems()));
  });

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      const updatedItems = [filteredList()[0], ...selectedItems()];
      setSelectedItems(updatedItems);
    }
  };

  return (
    <div class=""w-full bg-emphasize text-emphasize p-2 rounded border border-border"">
      <ResultSet items={selectedItems()} />
      <SearchBar searchValue={searchValue} setSearchValue={setSearchValue} onKeyPress={handleKeyPress} />
      <FilteredList items={filteredList()} />
    </div>
  );
};

export default MultiSelect;

```

src/frontend/components/MultiSelect/SearchBar.jsx:
```
const SearchBar = (props) => {
  const handleInputChange = (e) => {
    props.setSearchValue(e.target.value);
  };

  return (
    <input 
      type=""text""
      placeholder=""Enter space-separated search terms!""
      value={props.searchValue()}
      onInput={handleInputChange}
      onKeyPress={props.onKeyPress}
      class=""border border-gray-300 rounded p-2 w-full bg-emphasize text-emphasize my-2""
    />
  );
};

export default SearchBar;

```

src/frontend/components/MultiSelect/FilteredList.jsx:
```
import FilteredListItem from ""./FilteredListItem"";

const FilteredList = (props) => {
  return (
    <ul class=""list-inside"">
      {props.items.map((item, idx) => <FilteredListItem key={item} item={item} idx={idx + 1} />)}
    </ul>
  );
};

export default FilteredList;

```

src/frontend/components/MultiSelect/FilteredListItem.jsx:
```
import { createEffect } from ""solid-js"";

const FilteredListItem = (props) => {
  let itemRef;

  createEffect(() => {
    if (itemRef) {
      itemRef.scrollLeft = itemRef.scrollWidth;
    }
  });

  return (
    <div class=""flex justify-between items-center w-full font-mono"">
      <span ref={itemRef} class=""overflow-x-auto whitespace-no-wrap break-keep scrollbar-hidden mr-4 py-2"">{props.item}</span>
      <span class=""border-l border-border pl-2 pr-2"">{props.idx}</span>
    </div>
  );
};

export default FilteredListItem;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

- Set the placeholder to ""Suggestions below. Search here!""
- When clicking a filteredlistitem, add the corresponding value to the result set


## Project Specifics

- Every js file should *only export a single function or signal*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.452991452991453,0.9554373984856989,26.514147167125703
"You are AI Junior, you code like Donald Knuth.
# Working set

src/frontend/components/AttentionFileList.jsx:
```
import { createEffect } from 'solid-js';
import { fileList, setFileList } from '../model/fileList';
import fetchFileList from '../service/fetchFileList';
import MultiSelect from './MultiSelect/MultiSelect';
import getComparison from '../service/helpers/getComparison';
import flattenPaths from '../service/helpers/flattenPaths';
import extractQuery from '../service/helpers/extractQuery';
import { requirements } from '../model/requirements';

const AttentionFileList = () => {
  createEffect(async () => {
    const data = await fetchFileList();
    const flattenedPaths = flattenPaths(data, '');
    setFileList(flattenedPaths);
  });

  let defaultQuery = """";

  createEffect(() => {
    defaultQuery = extractQuery(requirements());
  });

  return (
    <div class=""w-full"">
      <MultiSelect availableItems={fileList()} selectedItems={[]} compare={getComparison()} itemCount={5} defaultQuery={defaultQuery} />
    </div>
  );
};

export default AttentionFileList;

```

src/frontend/components/MultiSelect/MultiSelect.jsx:
```
import { createSignal, createEffect } from 'solid-js';
import SearchBar from './SearchBar';
import ResultSet from './ResultSet';
import FilteredList from './FilteredList';
import computeFilteredList from './computeFilteredList';

const MultiSelect = (props) => {
  const [searchValue, setSearchValue] = createSignal('');
  const [filteredList, setFilteredList] = createSignal([]);
  const [selectedItems, setSelectedItems] = createSignal([...props.selectedItems]);

  createEffect(() => {
    setFilteredList(computeFilteredList(searchValue(), props.availableItems, props.compare, props.itemCount, selectedItems()));
  });

  const addFirstFilteredItem = () => {
    const updatedItems = [filteredList()[0], ...selectedItems()];
    setSelectedItems(updatedItems);
  };

  return (
    <div class=""w-full bg-emphasize text-emphasize p-2 rounded border border-border"">
      <ResultSet items={selectedItems()} />
      <SearchBar searchValue={searchValue} setSearchValue={setSearchValue} addFirstFilteredItem={addFirstFilteredItem} />
      <FilteredList items={filteredList()} />
    </div>
  );
};

export default MultiSelect;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

In multiselect, handle defaultQuery and use it for filtering instead of searchvalue when searchvalue is empty.



## Project Specifics

- Every js file should *only export a single function or signal*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.08247422680412371,0.11263137907364767,31.176914536239792
"You are AI Junior, you code like Donald Knuth.
# Working set

src/frontend/components/AttentionFileList.jsx:
```
import { createEffect } from 'solid-js';
import { fileList, setFileList } from '../model/fileList';
import fetchFileList from '../service/fetchFileList';
import MultiSelect from './MultiSelect/MultiSelect';
import getComparison from '../service/helpers/getComparison';
import flattenPaths from '../service/helpers/flattenPaths';

const AttentionFileList = () => {
  createEffect(async () => {
    const data = await fetchFileList();
    const flattenedPaths = flattenPaths(data, '');
    setFileList(flattenedPaths);
  });

  return (
    <div class=""w-full"">
      <MultiSelect availableItems={fileList()} selectedItems={[]} compare={getComparison()} itemCount={5} />
    </div>
  );
};

export default AttentionFileList;

```

src/frontend/model/requirements.js:
```
import { createSignal } from 'solid-js';

export const [requirements, setRequirements] = createSignal('');

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

In the attention file list:
When the requirements model changes, generate a query from it by passing
to extraxtQuery in service/helpers/extraxtQuery.js, which:
- Splits the requirements to words at any non-word char
- Drops words that are less than 3 chars in length or found in the ignore list (a constant array)
- joins them with space

Pass it to multiselect as a new prop: defaultQuery



## Project Specifics

- Every js file should *only export a single function or signal*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.22767857142857142,0.5799148773664182,32.7566787083184
"You are AI Junior, you code like Donald Knuth.
# Working set

src/frontend/components/MultiSelect/MultiSelect.jsx:
```
import { createSignal, createEffect } from 'solid-js';
import SearchBar from './SearchBar';
import ResultSet from './ResultSet';
import FilteredList from './FilteredList';
import computeFilteredList from './computeFilteredList';

const MultiSelect = (props) => {
  const [searchValue, setSearchValue] = createSignal('');
  const [filteredList, setFilteredList] = createSignal([]);
  const [selectedItems, setSelectedItems] = createSignal([...props.selectedItems]);

  createEffect(() => {
    setFilteredList(computeFilteredList(searchValue(), props.availableItems, props.compare, props.itemCount));
  });

  const addFirstFilteredItem = () => {
    const updatedItems = [filteredList()[0], ...selectedItems()];
    setSelectedItems(updatedItems);
  };

  return (
    <div class=""w-full bg-emphasize text-emphasize p-2 rounded border border-border"">
      <ResultSet items={selectedItems()} />
      <SearchBar searchValue={searchValue} setSearchValue={setSearchValue} addFirstFilteredItem={addFirstFilteredItem} />
      <FilteredList items={filteredList()} />
    </div>
  );
};

export default MultiSelect;

```

src/frontend/components/MultiSelect/ResultSet.jsx:
```
const ResultSet = (props) => {
  return (
    <ul class=""list-decimal pl-5 list-inside"">
      {props.items.map(item => <li key={item}>{item}</li>)}
    </ul>
  );
};

export default ResultSet;

```

src/frontend/components/MultiSelect/FilteredList.jsx:
```
import FilteredListItem from ""./FilteredListItem"";

const FilteredList = (props) => {
  return (
    <ul class=""list-decimal pl-5 list-inside"">
      {props.items.map((item, idx) => <FilteredListItem key={item} item={item} idx={idx + 1} />)}
    </ul>
  );
};

export default FilteredList;

```

src/frontend/components/MultiSelect/FilteredListItem.jsx:
```
import { createEffect } from ""solid-js"";

const FilteredListItem = (props) => {
  let itemRef;

  createEffect(() => {
    if (itemRef) {
      itemRef.scrollLeft = itemRef.scrollWidth;
    }
  });

  return (
    <div class=""flex justify-between items-center w-full font-mono"">
      <span ref={itemRef} class=""overflow-x-auto whitespace-no-wrap mr-4"">{props.item}</span>
      <span>{props.idx}</span>
    </div>
  );
};

export default FilteredListItem;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

- Remove padding from the left in the filtered list and result set.
- Add vertical margin to the filtered list item
- Also add a lightweight border between the two spans (in the middle) in the filtered list item



## Project Specifics

- Every js file should *only export a single function or signal*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.41818181818181815,0.9691338084475125,20.273134932713294
"You are AI Junior, you code like Donald Knuth.
# Working set

src/git/getRepoInfo.js:
```
import simpleGit from 'simple-git';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const git = simpleGit();
const packagePath = path.resolve(__dirname, '../../package.json');

export default async function getRepoInfo() {
    const remote = await git.getRemotes(true);
    const currentBranch = await git.revparse(['--abbrev-ref', 'HEAD']);
    const packageJSON = JSON.parse(fs.readFileSync(packagePath, 'utf8'));

    return {
        url: remote[0]?.refs?.fetch || '',
        branch: currentBranch,
        name: packageJSON.name || '',
        description: packageJSON.description || ''
    };
}

```

src/frontend/components/RepoInfo.jsx:
```
import { createSignal, onCleanup } from 'solid-js';
import fetchRepoInfo from '../service/fetchers/fetchRepoInfo';

const RepoInfo = () => {
    const [repoInfo, setRepoInfo] = createSignal({});

    // Fetch the repo info on component mount and set it to state
    const fetchAndSetRepoInfo = async () => {
        const data = await fetchRepoInfo();
        setRepoInfo(data);
    }

    fetchAndSetRepoInfo();

    return (
        <span class=""text-sm font-mono bg-gray-200 dark:bg-gray-700 px-1 py-0.5 mt-2 rounded"">
            {repoInfo().name} {repoInfo().branch}
        </span>
    );
};

export default RepoInfo;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

1. getRepoInfo should also return the current working dir
2. When clicking the RepoInfo component, it should
grow and display the working dir in a new line and then
all the remaining info, one item per line with labels.
3. When clicking again, it should go back to its original state.



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx file accordingly!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.47307692307692306,0.9985337322709147,37.92097045171708
"You are AI Junior, you code like Donald Knuth.
# Working set

src/frontend/components/RepoInfo.jsx:
```
import { createSignal } from 'solid-js';

const RepoInfo = () => {
  return (
    <span class=""text-sm font-mono bg-gray-200 dark:bg-gray-700 px-1 py-0.5 mt-2 rounded"">
      @aijunior/dev main
    </span>
  );
};

export default RepoInfo;

```

src/backend/handlers/git/gitStatusHandler.js:
```
import gitStatus from '../../../git/gitStatus.js';

export default async function gitStatusHandler(req, res) {
  try {
    const status = await gitStatus();
    res.status(200).send({ message: status });
  } catch (error) {
    let errorMessage = 'Error in getting Git status';
    if (error.stderr && error.stderr.includes('Not a git repository')) {
      errorMessage = 'Not a git repo. Run \'npx junior-init\' to initialize!';
    }
    res.status(500).send({ message: errorMessage, error });
  }
}

```

src/git/clearBranches.js:
```
import simpleGit from 'simple-git';

const git = simpleGit();

export default async function clearBranches(exceptions = []) {
  let deletedCount = 0;
  let skippedCount = 0;
  
  try {
    const currentBranch = await git.revparse(['--abbrev-ref', 'HEAD']);
    const allBranches = await git.branchLocal();

    const branchesToDelete = allBranches.all.filter(branch => {
      return branch !== currentBranch && !exceptions.includes(branch);
    });

    for (const branch of branchesToDelete) {
      try {
        const isMerged = await git.raw(['branch', '--merged', branch]);
        if (isMerged.includes(branch)) {
          await git.branch(['-d', branch]);
          deletedCount++;
        } else {
          console.log(`Branch ${branch} is not merged, skipping...`);
          skippedCount++;
        }
      } catch (err) {
        console.log(`Failed to delete branch ${branch}: ${err.message}. Skipping...`);
        skippedCount++;
      }
    }
  } catch (err) {
    console.error(`An error occurred: ${err}`);
  }

  console.log(`Deleted branches: ${deletedCount}`);
  console.log(`Skipped branches: ${skippedCount}`);
}

```

src/backend/routes/setupGitRoutes.js:
```
import gitStatusHandler from '../handlers/git/gitStatusHandler.js';
import commitGitHandler from '../handlers/git/commitGitHandler.js';
import resetGitHandler from '../handlers/git/resetGitHandler.js';

export function setupGitRoutes(app) {
  app.get('/git/status', gitStatusHandler);
  app.post('/git/reset', resetGitHandler);
  app.post('/git/commit', commitGitHandler);
}

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Create a new route ""/git/repoinfo"" which returns an object with fields:
  - url: The repository url
  - branch: Current branch
  - name: Project name read out of package.json
  - description: Description read out of package.json

Put the git and package.json logic to src/git/



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx file accordingly!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.23735408560311283,0.9542655002819339,23.958297101421877
"You are AI Junior, you code like Donald Knuth.
# Working set

src/frontend/components/MultiSelect.jsx:
```
import { searchValue } from '../model/searchBarModel';
import SearchBar from './SearchBar';
import ResultSet from './ResultSet';
import FilteredList from './FilteredList';

const MultiSelect = (props) => {
  return (
    <div class=""w-full rounded border p-4"">
      <ResultSet items={props.selectedItems} />
      <SearchBar />
      <FilteredList items={props.availableItems} filter={searchValue()} itemCount={props.itemCount} />
    </div>
  );
};

export default MultiSelect;

```

src/frontend/components/AttentionFileList.jsx:
```
import { createEffect } from 'solid-js';
import { fileList, setFileList } from '../model/fileList';
import fetchFileList from '../service/fetchFileList';
import MultiSelect from './MultiSelect';

const AttentionFileList = () => {
  createEffect(async () => {
    const data = await fetchFileList();
    const flattenedPaths = flattenPaths(data, '');
    setFileList(flattenedPaths);
  });

  const flattenPaths = (node, path) => {
    if (node.type === 'file') {
      return [path + '/' + node.name];
    }
    if (!Array.isArray(node.children)) {
      return [];
    }
    return node.children.reduce((acc, child) => {
      return acc.concat(flattenPaths(child, path + '/' + node.name));
    }, []);
  };

  return (
    <div class=""w-full"">
      <MultiSelect availableItems={fileList()} selectedItems={[]} itemCount={5} />
    </div>
  );
};

export default AttentionFileList;

```

src/frontend/components/FilteredList.jsx:
```
const FilteredList = (props) => {
  return (
    <ul class=""w-full list-disc pl-5"">
      {props.items.filter(item => item.includes(props.filter)).slice(0, props.itemCount).map(item => <li key={item}>{item}</li>)}
    </ul>
  );
};

export default FilteredList;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

If the filtered list gets a function, treat it as a comparison function.
Create a new function in services/helpers/ (Create the dir)
that returns another which is then used to match.
Don't forget to update MultiSelect



## Project Specifics

- Every js file should *only export a single function or signal*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!
- Remove _all existing comments_ from the code!
- Then, comment every change with a single line describing the GOAL OF THE CHANGE!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.24774774774774774,0.896061681471925,26.267851073127396
"You are AI Junior, you code like Donald Knuth.
# Working set

src/frontend/components/CommitButton.jsx:
```
import { postCommit } from '../service/postCommit';
import postDescriptor from '../service/postDescriptor';
import { commitMessage } from '../model/commitMessage';
import { fetchGitStatus } from '../service/fetchGitStatus';
import clearState from '../service/clearState';

const CommitButton = () => {
  const handleCommit = async () => {
    const response = await postCommit(commitMessage());
    console.log(response.message);
    
    await postDescriptor({ requirements: '', attention: '' });
    
    const status = await fetchGitStatus();
    console.log(status);
    clearState();
  };

  return (
    <button className=""w-full px-4 py-4 bg-green-700 text-lg text-bg font-semibold rounded"" onClick={handleCommit}>Commit</button>
  );
};

export default CommitButton;

```

src/frontend/components/RollbackButton.jsx:
```
import { createSignal } from ""solid-js"";
import { resetGit } from '../service/resetGit';
import RollbackConfirmationDialog from './RollbackConfirmationDialog';
import clearState from '../service/clearState';

const RollbackButton = () => {
  const [showConfirmation, setShowConfirmation] = createSignal(false);

  const handleReset = async () => {
    const response = await resetGit();
    console.log(response.message);
    clearState();
  };

  const handleConfirm = () => {
    setShowConfirmation(false);
    handleReset();
  };

  const handleRollbackClick = () => {
    const disableConfirmation = localStorage.getItem('Junior.disableRollbackConfirmation') === 'true';
    if (disableConfirmation) {
      handleReset();
    } else {
      setShowConfirmation(true);
    }
  };

  return (
    <>
      <button className=""w-full px-4 py-4 bg-red-700 text-lg text-bg font-semibold rounded"" onClick={handleRollbackClick}>Roll Back</button>
      <RollbackConfirmationDialog visible={showConfirmation()} onConfirm={handleConfirm} onCancel={() => setShowConfirmation(false)} />
    </>
  );
};

export default RollbackButton;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Make the button colors lighter


## Project Specifics

- Every js file should *only export a single function or signal*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!
- Remove _all existing comments_ from the code!
- Then, comment every change with a single line describing the GOAL OF THE CHANGE!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.05755395683453238,0.04946697944553444,27.03701166919155
"You are AI Junior, you code like Donald Knuth.
# Working set

src/backend/fileutils/readFileList.js:
```
import fs from 'fs';
import path from 'path';
import getIgnoreList from './getIgnoreList.js';

async function readFileList(dir, relativePath = """") {
  const items = await fs.promises.readdir(dir);
  const ignoreList = getIgnoreList();

  const itemDetails = await Promise.all(
    items.map(async item => {
      if (ignoreList.includes(item)) return;
      const fullPath = path.join(dir, item);
      const stats = await fs.promises.stat(fullPath);
      if (stats.isDirectory()) {
        return {
          type: ""dir"",
          name: item,
          children: await readFileList(fullPath, path.join(relativePath, item))
        };
      } else {
        return {
          type: ""file"",
          name: item,
          path: path.join(relativePath, item)
        };
      }
    })
  );

  return itemDetails.filter(Boolean);
}

export default readFileList;

```


# Task

Fix the following issue!

This returns an array, but it should return an object, just like during recursion: Add a root dir object with name ""."" 



## Project Specifics

- Every js file should *only export a single function or signal*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!
- Remove _all existing comments_ from the code!
- Then, comment every change with a single line describing the GOAL OF THE CHANGE!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.10679611650485436,0.03382395929010841,21.236760581595302
"You are AI Junior, you code like Donald Knuth.
# Working set

src/frontend/components/PromptCreation.jsx:
```
import TasksList from './TasksList';
import PromptDescriptor from './PromptDescriptor';
import GenerateButton from './GenerateButton';
import PromptDisplay from './PromptDisplay';
import RequirementsEditor from './RequirementsEditor';

const PromptCreation = () => {
  return (
    <>
      <TasksList />
      <RequirementsEditor />
      <PromptDescriptor />
      <GenerateButton />
      <PromptDisplay />
    </>
  );
};

export default PromptCreation;

```

src/frontend/components/TasksList.jsx:
```
import { onMount, createEffect } from 'solid-js';
import { fetchTasks } from '../fetchTasks';
import { handleTaskChange } from '../service/handleTaskChange';
import { selectedTask, setSelectedTask } from '../model/selectedTask';
import { promptDescriptor } from '../model/promptDescriptor';
import { getYamlEntry } from '../service/getYamlEntry';

const TasksList = () => {
  const tasks = fetchTasks();

  createEffect(() => {
    const descriptor = promptDescriptor();
    if (descriptor !== '') {
      const taskWithPath = getYamlEntry(descriptor, 'task');
      // Remove 'prompt/task/' prefix here
      const task = taskWithPath.replace('prompt/task/', '');
      setSelectedTask(task);
    }
  });

  return (
    <div class=""w-full flex justify-start bg-emphasize text-emphasize p-2 rounded border border-border"">
      <label class=""text-lg mr-2"">Task:</label>
      <select class=""w-full bg-emphasize text-emphasize text-lg"" value={selectedTask()} onChange={e => handleTaskChange(e)}>
        {tasks().map(task => <option value={task}>{task}</option>)}
      </select>
    </div>
  );
};

export default TasksList;

```

src/frontend/components/NavBar.jsx:
```
import ThemeSwitcher from './ThemeSwitcher';
import SubTitle from './SubTitle';

const NavBar = () => {
  const title = 'Junior';

  return (
    <div class=""relative w-full"">
      <div class=""absolute top-0 right-0 m-4"">
        <ThemeSwitcher />
      </div>
      <div class=""flex flex-col items-center justify-center"">
        <a href=""https://github.com/tisztamo/Junior"" class=""text-center text-3xl mt-6 no-underline"">{title}</a>
        <SubTitle />
      </div>
    </div>
  );
};

export default NavBar;

```

src/frontend/components/RollbackButton.jsx:
```
import { createSignal } from ""solid-js"";
import { resetGit } from '../service/resetGit';
import RollbackConfirmationDialog from './RollbackConfirmationDialog';
import clearState from '../service/clearState';

const RollbackButton = () => {
  const [showConfirmation, setShowConfirmation] = createSignal(false);

  const handleReset = async () => {
    const response = await resetGit();
    console.log(response.message);
    clearState();
  };

  const handleConfirm = () => {
    setShowConfirmation(false);
    handleReset();
  };

  const handleRollbackClick = () => {
    const disableConfirmation = localStorage.getItem('Junior.disableRollbackConfirmation') === 'true';
    if (disableConfirmation) {
      handleReset();
    } else {
      setShowConfirmation(true);
    }
  };

  return (
    <>
      <button className=""w-full px-4 py-4 bg-red-700 text-lg text-bg font-semibold rounded"" onClick={handleRollbackClick}>Roll Back</button>
      <RollbackConfirmationDialog visible={showConfirmation()} onConfirm={handleConfirm} onCancel={() => setShowConfirmation(false)} />
    </>
  );
};

export default RollbackButton;

```

src/frontend/components/ChangeExecution.jsx:
```
import ExecuteButton from './ExecuteButton';
import ExecutionResultDisplay from './ExecutionResultDisplay';

const ChangeExecution = () => {
  return (
    <>
      <ExecuteButton />
      <ExecutionResultDisplay />
    </>
  );
};

export default ChangeExecution;

```

src/frontend/components/GitStatusDisplay.jsx:
```
import { onMount, createEffect } from 'solid-js';
import { gitStatus } from '../model/gitStatus';
import { fetchGitStatus } from '../service/fetchGitStatus';

const GitStatusDisplay = () => {
  let statusContainer;

  onMount(fetchGitStatus);

  createEffect(() => {
    const gitStatusValue = gitStatus();
    if (gitStatusValue) {
      if (gitStatusValue.error) {
        statusContainer.innerText = `${gitStatusValue.message}\n${gitStatusValue.error.stderr}`;
      } else if (gitStatusValue.message && gitStatusValue.message !== '') {
        statusContainer.innerText = gitStatusValue.message;
      }
    }
  });

  return (
    <pre
      ref={statusContainer}
      class={`rounded overflow-auto max-w-full ${gitStatus() && gitStatus().message && gitStatus().message !== '' ? 'block' : 'hidden'}`}
    />
  );
};

export default GitStatusDisplay;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

We need a Sample Component, which is short but shows
how we write our components.
We need to show: - How the model is used - How local state is managed - How services are called - etc.
Imagine a sample service and model, use it in the sample component, but do not write it.
Write a comprehensive and concise sample to src/frontend/components/SampleComponent.jsx


## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!
- Remove _all existing comments_ from the code!
- Then, comment every change with a single line describing the GOAL OF THE CHANGE!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.1746031746031746,0.9438587729581438,25.573423705088842
"You are AI Junior, you code like Donald Knuth.
# Working set

package.json:
```
{
  ""name"": ""@aijunior/dev"",
  ""version"": ""0.2.0"",
  ""description"": ""Your AI Contributor which codes itself"",
  ""type"": ""module"",
  ""main"": ""src/main.js"",
  ""bin"": {
    ""junior"": ""src/main.js"",
    ""junior-web"": ""src/web.js"",
    ""junior-init"": ""src/init.js""
  },
  ""scripts"": {
    ""cli"": ""node src/main.js"",
    ""start"": ""node src/web.js"",
    ""build:css"": ""postcss ./src/frontend/styles.css -o ./dist/styles.css"",
    ""update-logo"": ""node ./scripts/updateLogo.js"",
    ""clear-branches"": ""node ./scripts/clearBranchesCommand.js $@"",
    ""test"": ""cypress open"",
    ""rollback"": ""node ./scripts/rollbackCommand.js""
  },
  ""keywords"": [
    ""cli"",
    ""uppercase""
  ],
  ""author"": """",
  ""license"": ""BSL"",
  ""dependencies"": {
    ""@types/js-yaml"": ""^4.0.5"",
    ""autoprefixer"": ""^10.4.14"",
    ""chatgpt"": ""^5.2.4"",
    ""cors"": ""^2.8.5"",
    ""docsify-cli"": ""^4.4.4"",
    ""ejs"": ""^3.1.9"",
    ""express"": ""^4.18.2"",
    ""highlight.js"": ""^11.8.0"",
    ""js-yaml"": ""^4.1.0"",
    ""markdown-it"": ""^13.0.1"",
    ""marked"": ""^5.1.0"",
    ""postcss"": ""^8.4.26"",
    ""postcss-nested"": ""^6.0.1"",
    ""sharp"": ""^0.32.4"",
    ""simple-git"": ""^3.19.1"",
    ""solid-js"": ""^1.7.7"",
    ""tailwindcss"": ""^3.3.3"",
    ""vite"": ""^4.3.9"",
    ""vite-plugin-solid"": ""^2.7.0"",
    ""ws"": ""^8.13.0""
  },
  ""directories"": {
    ""doc"": ""docs""
  },
  ""repository"": {
    ""type"": ""git"",
    ""url"": ""git+https://github.com/tisztamo/Junior.git""
  },
  ""bugs"": {
    ""url"": ""https://github.com/tisztamo/Junior/issues""
  },
  ""homepage"": ""https://github.com/tisztamo/Junior#readme"",
  ""devDependencies"": {
    ""cypress"": ""^12.17.4""
  }
}

```

src/git/resetGit.js:
```
import { promisify } from 'util';
import { exec as execCb } from 'child_process';

const exec = promisify(execCb);

export default async function resetGit() {
  try {
    await executeCommand('git clean -f -d');
    await executeCommand('git reset --hard');
  } catch (err) {
    console.error(`An error occurred: ${err}`);
  }
}

async function executeCommand(command) {
  try {
    console.log(`Running command: ${command}`);
    const { stdout } = await exec(command);
    console.log(`stdout: ${stdout}`);
  } catch (err) {
    console.error(`An error occurred while executing the command: ${command}. Error: ${err}`);
  }
}

```

scripts/rollbackCommand.js:
```
import resetGit from '../src/git/resetGit.js';

async function executeRollback() {
  try {
    await resetGit();
  } catch (err) {
    console.error();
  }
}

executeRollback();

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

""npx junior-rollback"" should also execute resetGit.



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx file accordingly!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

Before starting, check if you need more files to solve the task.
Do not edit any file not provided in the working set!
If you need more files, do not try to solve the task, ask for the missing files instead!

EXAMPLE START

`filepath1` is needed to solve the task but is not in the working set.

EXAMPLE END

",0.0481283422459893,0.05153215057169127,114.40279716860073
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

src/frontend/components/RequirementsEditor.jsx:
```
import { createSignal, createEffect } from 'solid-js';
import postDescriptor from '../service/postDescriptor';
import { promptDescriptor, setPromptDescriptor } from '../model/promptDescriptor'; 
import { requirements, setRequirements } from '../model/requirements';
import { getYamlEntry } from '../service/getYamlEntry';
import isBetaEnabled from '../service/config/isBetaEnabled'; 
import jsyaml from 'js-yaml'; 
import AutoGrowingTextarea from './AutoGrowingTextarea';

const RequirementsEditor = () => {
  const [isBeta, setIsBeta] = createSignal(false);

  const init = async () => {
    const betaStatus = await isBetaEnabled();
    setIsBeta(betaStatus);
  };

  createEffect(init);

  const handleInput = (e) => {
    const descriptor = promptDescriptor();
    const parsed = jsyaml.load(descriptor);
    parsed.requirements = e.target.value; 
    const updatedDescriptor = jsyaml.dump(parsed);
    setPromptDescriptor(updatedDescriptor);
  };

  const handleChange = async (e) => {
    handleInput(e);  // Added handleInput call here
    const currentRequirements = e.target.value;
    await postDescriptor({ requirements: currentRequirements });
  };

  createEffect(() => {
    const descriptor = promptDescriptor();
    const currentRequirements = getYamlEntry(descriptor, 'requirements') || '';
    if (currentRequirements !== requirements()) {
      setRequirements(currentRequirements);
    }
  });

  return (
    <div class=""w-full flex justify-start bg-emphasize text-emphasize p-1 rounded border border-border mt-2"">
      <AutoGrowingTextarea
        class=""w-full bg-emphasize text-emphasize text-lg""
        placeholder={isBeta() ? ""Enter your requirements..."" : ""This is disabled for now. Call with 'npx junior-web -- --beta' to enable.""}
        value={isBeta() ? requirements() : ''}
        onInput={e => handleInput(e)}
        onChange={e => handleChange(e)}
        disabled={!isBeta()}
      />
    </div>
  );
};

export default RequirementsEditor;

```

src/frontend/components/AutoGrowingTextarea.jsx:
```
import { onCleanup, onMount } from 'solid-js';

const AutoGrowingTextarea = (props) => {
  let textRef;

  const resize = () => {
    textRef.style.height = 'auto';
    textRef.style.height = textRef.scrollHeight + 'px';
  }

  // Use the onMount lifecycle hook to ensure the ref is available
  onMount(() => {
    textRef.addEventListener('input', resize, false);
    resize();  // To resize on initialization
  });

  // When the component unmounts, cleanup the event listener
  onCleanup(() => {
    textRef.removeEventListener('input', resize, false);
  });

  return (
    <textarea
      {...props}
      ref={textRef}
      onInput={resize} // Bind onInput event to the resize function
      rows=""1"" // Start with one row
      style=""overflow:hidden"" // Hide the scrollbar
    />
  );
};

export default AutoGrowingTextarea;

```


# Task

Fix the following issue!

In the AutoGrowingTextarea:
  - Remove onMount and onCleanup, no need for the code in them.
  - Add an effect which calls the valueSignal prop (its an optional function)
  - Pass the value of valueSignal to the textarea value attribute. If no valueSignal, pass props.value
In the req editor:
  Pass valueSignal instead of value. Don't call it, pass the function
Also remove comments


## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx file accordingly!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.06598984771573604,0.03494593433407503,30.265491900843113
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

docs/roadmap.md:
```
# Roadmap
## Usability & fixes
- ✅ Done: Implement the four buttons
- ✅ Done: Fix every major bug
- ✅ Done: Write docs to allow using Junior for developing external projects

## Programming on mobile
- Develop a file browser to allow the user to select attention files from mobile
- Create an app by wrapping the frontend
- Test it by developing at the local Playground and while commuting

## Auto-attention
- Propose an attention based on the requirements and task the user selected
- Embed every file in the project
- Store the embeddings in an (embedded) vector database

## Prompt herds
- Scan and transform (refactor) the codebase gradually

```


# Task

Improve the documentation!

Incorporate version numbers:
  ""Usability & fixes"" is 0.2, released aug 2023
  ""Programming on mobile"" will be 0.3, q4 2023
    Add a new subitem as the second one: ""Allow secure hosting"" 
  Add a new item ""Plugin system"" 0.4 q4 2023
    Allow writing any of the current components as a plugin
  ""Auto-attention"" 0.5 q1 2024
    Remove ""(embedded)""
  ""Prompt herds"" 0.6 q2 2024


Do not create backup files.

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.5344827586206896,0.8320544563328942,35.0
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

src/frontend/components/PromptDescriptor.jsx:
```
import { onMount, onCleanup } from 'solid-js';
import { fetchDescriptor } from '../service/fetchDescriptor';
import { fetchGitStatus } from '../service/fetchGitStatus';
import { useWebsocket } from '../service/useWebsocket';
import { promptDescriptor, setPromptDescriptor } from '../model/promptDescriptor';

const PromptDescriptor = () => {

  onMount(async () => {
    const text = await fetchDescriptor();
    setPromptDescriptor(text);
  });

  useWebsocket(async (e) => {
    if (e.data === 'update') {
      const text = await fetchDescriptor();
      setPromptDescriptor(text);
      // Fetch git status when an update event is received
      fetchGitStatus();
    }
  });

  onCleanup(() => {
    setPromptDescriptor('');
  });

  return (
    <div class=""overflow-auto max-w-full"">
      <div class=""whitespace-pre-wrap overflow-x-scroll overflow-y-auto font-mono"">
        {promptDescriptor()}
      </div>
    </div>
  );
};

export default PromptDescriptor;

```

src/prompt/promptDescriptorConfig.js:
```
export const descriptorFileName = ""prompt.yaml"";

```

src/frontend/components/PromptDisplay.jsx:
```
import { createSignal, onMount, createEffect } from ""solid-js"";
import { prompt } from '../model/prompt';

const PromptDisplay = () => {
  let div;
  let summary;

  createEffect(() => {
    if (div) {
      div.innerHTML = prompt();
      summary.innerHTML = `prompt length: ${prompt().length} chars`;
    }
  });

  return (
    <details class=""w-full max-w-screen overflow-x-auto whitespace-normal markdown"" style={{ display: prompt().length > 0 ? 'block' : 'none' }}>
      <summary ref={summary}></summary>
      <div ref={div} class=""mt-4""></div>
    </details>
  );
};

export default PromptDisplay;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Wrap the prompt descriptor in a html details tag. Its header is the descriptor filename with mono font. Otherwise style it like the one in PromptDisplay



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx file accordingly!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.09243697478991597,0.051485324826692824,18.920887928424502
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

src/frontend/service/handleGeneratePrompt.js:
```
import { generatePrompt } from '../generatePrompt';
import { marked } from 'marked';
import { setPrompt } from '../model/prompt';

const handleGeneratePrompt = async () => {
  try {
    const response = await generatePrompt();

    navigator.clipboard.writeText(response.prompt)
      .then(() => {
        console.log('Prompt copied to clipboard!');
      })
      .catch(err => {
        console.error('Failed to copy prompt: ', err);
      });

    const htmlPrompt = marked(response.prompt);

    setPrompt(htmlPrompt);
  } catch (error) {
    alert(error.message);
  }
};

export default handleGeneratePrompt;

```

src/frontend/components/RequirementsEditor.jsx:
```
import { createEffect } from 'solid-js';
import postDescriptor from '../service/postDescriptor';
import { promptDescriptor, setPromptDescriptor } from '../model/promptDescriptor'; 
import { requirements, setRequirements } from '../model/requirements';
import { getYamlEntry } from '../service/getYamlEntry';
import jsyaml from 'js-yaml'; 

const RequirementsEditor = () => {
  const handleRequirementsChange = async (e) => {
    await postDescriptor({ requirements: e.target.value });
  };

  const handleInput = (e) => {
    const descriptor = promptDescriptor();
    const parsed = jsyaml.load(descriptor);
    parsed.requirements = e.target.value; 
    const updatedDescriptor = jsyaml.dump(parsed);  // Changed from jsyaml.safeDump
    setPromptDescriptor(updatedDescriptor);
  };

  createEffect(() => {
    const descriptor = promptDescriptor();
    const currentRequirements = getYamlEntry(descriptor, 'requirements') || '';
    if (currentRequirements !== requirements()) {
      setRequirements(currentRequirements);
    }
  });

  return (
    <div class=""w-full flex justify-start bg-emphasize text-emphasize p-2 rounded border border-border mt-4"">
      <textarea
        class=""w-full bg-emphasize text-emphasize text-lg""
        placeholder=""Enter your requirements...""
        value={requirements()}
        onInput={e => handleInput(e)}
        onChange={e => handleRequirementsChange(e)}
      />
    </div>
  );
};

export default RequirementsEditor;


```


# Task

Fix the following issue!

Before generating the prompt, await postDescriptor
with an object having requirements field filled correctly.



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx file accordingly!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.12213740458015267,0.20523647846710646,27.055498516937366
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

src/frontend/components/RequirementsEditor.jsx:
```
import { createEffect } from 'solid-js';
import postDescriptor from '../service/postDescriptor';
import { promptDescriptor } from '../model/promptDescriptor';
import { requirements, setRequirements } from '../model/requirements';
import { getYamlEntry } from '../service/getYamlEntry';

const RequirementsEditor = () => {
  const handleRequirementsChange = async (e) => {
    setRequirements(e.target.value);
    await postDescriptor({ requirements: e.target.value });
  };

  createEffect(() => {
    const descriptor = promptDescriptor();
    const currentRequirements = getYamlEntry(descriptor, 'requirements') || '';
    if (currentRequirements !== requirements()) {
      setRequirements(currentRequirements);
    }
  });

  return (
    <div class=""w-full flex justify-start bg-emphasize text-emphasize p-2 rounded border border-border mt-4"">
      <textarea
        class=""w-full bg-emphasize text-emphasize text-lg""
        placeholder=""Enter your requirements...""
        value={requirements()}
        onInput={e => handleRequirementsChange(e)}
      />
    </div>
  );
};

export default RequirementsEditor;

```

src/frontend/model/selectedTask.js:
```
import { createSignal } from 'solid-js';

export const [selectedTask, setSelectedTask] = createSignal('');

```

src/frontend/service/getYamlEntry.js:
```
import YAML from 'yaml';

export const getYamlEntry = (yamlString, entry) => {
  const doc = YAML.parse(yamlString);
  return doc[entry];
};

```


# Task

Fix the following issue!

getYamlEntry.js:5 Uncaught TypeError: Cannot read properties of null (reading &#39;requirements&#39;)
  at getYamlEntry (getYamlEntry.js:5:13)



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx file accordingly!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.1917808219178082,0.6050973920853587,19.467922333931785
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

src/frontend/components/TasksList.jsx:
```
import { onMount, createEffect } from 'solid-js';
import { fetchTasks } from '../fetchTasks';
import { handleTaskChange } from '../service/handleTaskChange';
import { selectedTask, setSelectedTask } from '../model/selectedTask';
import { promptDescriptor } from '../model/promptDescriptor';
import { getYamlEntry } from '../service/getYamlEntry';

const TasksList = () => {
  const tasks = fetchTasks();

  createEffect(() => {
    const descriptor = promptDescriptor();
    if (descriptor !== '') {
      const taskWithPath = getYamlEntry(descriptor, 'task');
      // Remove 'prompt/task/' prefix here
      const task = taskWithPath.replace('prompt/task/', '');
      setSelectedTask(task);
    }
  });

  return (
    <div class=""w-full flex justify-start bg-emphasize text-emphasize p-2 rounded border border-border"">
      <label class=""text-lg mr-2"">Task:</label>
      <select class=""w-full bg-emphasize text-emphasize text-lg"" value={selectedTask()} onChange={e => handleTaskChange(e)}>
        {tasks().map(task => <option value={task}>{task}</option>)}
      </select>
    </div>
  );
};

export default TasksList;

```

src/frontend/components/RequirementsEditor.jsx:
```
import { createEffect } from 'solid-js';
import postDescriptor from '../service/postDescriptor';
import { promptDescriptor } from '../model/promptDescriptor';

const RequirementsEditor = () => {
  let requirements = promptDescriptor().requirements || '';

  const handleRequirementsChange = async (e) => {
    requirements = e.target.value;
    await postDescriptor({ requirements: requirements });
  };

  createEffect(() => {
    requirements = promptDescriptor().requirements || '';
  });

  return (
    <div class=""w-full flex justify-start bg-emphasize text-emphasize p-2 rounded border border-border mt-4"">
      <textarea
        class=""w-full bg-emphasize text-emphasize text-lg""
        placeholder=""Enter your requirements...""
        value={requirements}
        onInput={e => handleRequirementsChange(e)}
      />
    </div>
  );
};

export default RequirementsEditor;

```

src/frontend/model/selectedTask.js:
```
import { createSignal } from 'solid-js';

export const [selectedTask, setSelectedTask] = createSignal('');

```


# Task

Fix the following issue!

Requirements are not populated when the descriptor changes. Fix reactivity by introducing a signal in the model! Check the task list for example!


## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx file accordingly!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.38190954773869346,0.8479723655810018,100.01499887516871
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

docs/descriptor.md:
```
# Prompt Descriptor

The prompt descriptor is a YAML file (prompt.yaml) that outlines the details necessary for generating a task prompt for the AI model. It is used to specify the task, attention, requirements, and other attributes.

## Example

```yaml
task: prompt/task/feature/implement.md
attention:
  - src/interactiveSession/startInteractiveSession.js
  - src/prompt/createPrompt.js
  - src/attention/readAttention.js
  - prompt.yaml
requirements: >
  Write a README.md for this _exploratory_ project!
```

## Attributes

- task: Describes the task type and scope.
- attention: Lists the files and directories most relevant to the task.
- requirements: Describes the actual task in a human-readable format.
- format: (Optional and half-working) Determines how the output will be formatted. It should be avoided for now.
- os: (Default: ""Debian"") Specifies the operating system.
- installedTools: By default, this includes ""npm, jq."" Allows the user to mention his tools, e.g. when drawing. The user can create prompt/installedTools.md to overwrite.

Additionally, users can overwrite attributes in prompt.yaml or create prompt/attributeName.md with the content for any attribute, including those not listed here.

## Attributes referencing .md files

When a yaml attribute refers to an existing file, its content will be used. For example, the line `task: prompt/task/feature/implement.md` in the example yaml refers to an existing markdown file and its content is injected into the task.

Here's the content of prompt/task/feature/implement.md as a supplement to the example:

```
Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

<%= requirements %>

<%= projectSpecifics %>
```

## Template Files

Prompt parts are markdown template files, and [ejs](https://ejs.co/) runs on them. Attributes from the yaml file are available in the template, e.g., `<%= requirements %>` injects the requirements.


```


# Task

Improve the documentation!

1. Create a new subsection for ""Additionally, users can.."". Mention that the yaml has preference over the file. Show a simple example with setting the default os in the file and overwriting it. 2. The last part, "", including those not listed here."" should be moved to an entirely new section with title ""Custom Attributes"". Note here that the custom attributes can be injected to prompts using ejs syntax. Give a simple example for setting ""documentationRequirements"" in a file and how to inject it to prompt template files

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: Debian


Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.19133574007220217,0.771036869954235,30.331501776206203
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

docs/README.md:
```
Warn: This README is AI generated, just like all the source files of this project.

# Junior - Your AI-first IDE 

[![Video: Junior codes itself](/assets/video_cover.jpg)](https://youtu.be/NL4uFJSvfW0)

*""Video: Junior codes itself""*

Junior is an **AI-first IDE** targeting craftsmen, professional programmers who enjoy customizing and fine-tuning their tools. Embracing a design philosophy of being simple, configurable, and auditable, Junior offers a unique space where developers can work hand-in-hand with AI throughout the development process.

With a structured task descriptor and by spotlighting relevant parts of your project, you can delegate tasks such as code implementation, documentation, testing, and more, to Junior.

## Getting Started

For guidance on using Junior, please refer to [usage.md](usage.md).

## Contributing and Support

Your contributions make a difference! At Junior, we value the collaboration of the community. Your role as a contributor is to monitor the development, provide detailed prompts, and thoroughly review the generated outcomes.

For questions or assistance, please raise an issue in our GitHub repository.

**Note:** We've tested Junior primarily with the GPT-4 model. However, you're welcome to experiment with similarly capable models and share your findings. It's not compatible with GPT-3.5.

```


# Task

Improve the documentation!

Set target group better: ""...targeting professional programmers who enjoy...""
Add a note that Junior is written without manual coding since the very beginnings, well before the four buttons were all implemented. ( Reword this note to be brave but not what Hungarians call pöffeszkedő )


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: Debian


Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.03333333333333333,0.2988950238697822,18.894443627691185
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

```
./
├── .git/...
├── .github/...
├── .gitignore
├── .vscode/...
├── LICENSE.txt
├── README.md
├── change.sh
├── docs/...
├── integrations/...
├── node_modules/...
├── package-lock.json
├── package.json
├── prompt/...
├── prompt.md
├── prompt.yaml
├── scripts/...
├── src/...

```
```
docs/
├── .nojekyll
├── README.md
├── README.md.backup
├── _sidebar.md
├── _sidebar_backup.md
├── assets/...
├── descriptor.md
├── docsifyConfig.js
├── index.html
├── roadmap.md
├── screenshot.png
├── usage.md
├── web.md

```
docs/index.html:
```
<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <title>Document</title>
  <meta http-equiv=""X-UA-Compatible"" content=""IE=edge,chrome=1"" />
  <meta name=""description"" content=""Description"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0, minimum-scale=1.0"">
  <link rel=""icon"" href=""assets/favicon.ico"" type=""image/x-icon"">
  <link rel=""stylesheet"" href=""//cdn.jsdelivr.net/npm/docsify@4/lib/themes/vue.css"">
</head>
<body>
  <style>
    .app-name-link img {
      max-width: 70px;
    }
  </style>
  <div id=""app""></div>
  <script src=""docsifyConfig.js""></script>
  <!-- Docsify v4 -->
  <script src=""//cdn.jsdelivr.net/npm/docsify@4""></script>
  <script async src=""https://platform.twitter.com/widgets.js"" charset=""utf-8""></script>
</body>
</html>

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Add margin to iframes. 
Factor out the css to a file in assets.



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx file accordingly!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: Debian


Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.3668639053254438,0.8676034686116068,19.261360284258224
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

```
./
├── .git/...
├── .github/...
├── .gitignore
├── .vscode/...
├── LICENSE.txt
├── README.md
├── change.sh
├── docs/...
├── integrations/...
├── node_modules/...
├── package-lock.json
├── package.json
├── prompt/...
├── prompt.md
├── prompt.yaml
├── scripts/...
├── src/...

```
docs/_sidebar.md:
```
* [Junior Docs](./README.md)
* [Usage](./usage.md)
* [Web](./web.md)
* [Prompt Descriptor](./descriptor.md)
* [Roadmap](./roadmap.md)

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Include this in the sidebar as html if possible!
<blockquote class=""twitter-tweet""><p lang=""en"" dir=""ltr"">After 34 years of daily CODING, I STOPPED and now only write software in ENGLISH with the Junior AI IDE. So much powerful than naked ChatGPT. <a href=""https://t.co/MD1G1kIQte"">https://t.co/MD1G1kIQte</a> <a href=""https://twitter.com/hashtag/AI?src=hash&amp;ref_src=twsrc%5Etfw"">#AI</a> <a href=""https://twitter.com/hashtag/development?src=hash&amp;ref_src=twsrc%5Etfw"">#development</a> <a href=""https://twitter.com/hashtag/JuniorIDE?src=hash&amp;ref_src=twsrc%5Etfw"">#JuniorIDE</a> <a href=""https://twitter.com/hashtag/ChatGPT?src=hash&amp;ref_src=twsrc%5Etfw"">#ChatGPT</a></p>&mdash; Krisztián Schäffer (@tisztamo_x) <a href=""https://twitter.com/tisztamo_x/status/1693697665937166701?ref_src=twsrc%5Etfw"">August 21, 2023</a></blockquote> <script async src=""https://platform.twitter.com/widgets.js"" charset=""utf-8""></script>



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx file accordingly!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: Debian


Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.06363636363636363,0.3576342599788247,27.730849247724095
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

```
./
├── .git/...
├── .github/...
├── .gitignore
├── .vscode/...
├── LICENSE.txt
├── README.md
├── change.sh
├── docs/...
├── integrations/...
├── node_modules/...
├── package-lock.json
├── package.json
├── prompt/...
├── prompt.md
├── prompt.yaml
├── scripts/...
├── src/...

```
.gitignore:
```
secret.sh
node_modules/
tmp/
prompt.yaml
prompt.md
change.sh

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Gitignore only ./prompt.yaml ./prompt.md and ./change.sh not same-name files in subdirs.
Those files are already added to git. Delete them now so that if later modified, their modification will be ignored.



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx file accordingly!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.0990990990990991,0.37483340510068835,13.856406460551018
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

```
./
├── .git/...
├── .github/...
├── .gitignore
├── .vscode/...
├── LICENSE.txt
├── README.md
├── change.sh
├── docs/...
├── integrations/...
├── node_modules/...
├── package-lock.json
├── package.json
├── prompt/...
├── prompt.md
├── prompt.yaml
├── scripts/...
├── src/...

```
```
prompt/
├── archive/...
├── defaults/...
├── format/...
├── format.md
├── installedTools.md
├── os.md
├── projectSpecifics.md
├── system.md
├── task/...

```
.gitignore:
```
secret.sh
node_modules/
tmp/


```

src/execute/executeAndForwardOutput.js:
```
import { writeFile } from 'fs/promises';
import { spawn } from 'child_process';
import { makeExecutable } from './makeExecutable.js';

async function executeAndForwardOutput(code, next) {
  try {
    if (code == null || !code.startsWith('#!')) {
      throw new Error('Code does not start with a shebang');
    }
    await writeFile('./change.sh', code);
    await makeExecutable('./change.sh');
    
    const child = spawn('./change.sh', [], { shell: true });
    let commandOutput = '';

    child.stdout.on('data', (data) => {
      console.log(`${data}`);
      commandOutput += data;
    });

    child.stderr.on('data', (data) => {
      console.error(`${data}`);
      commandOutput += data;
    });

    child.on('close', (code) => {
      if (next && typeof next === 'function') {
        next(code, commandOutput);
      }
    });
  } catch (err) {
    console.log(err);
  }
}

export { executeAndForwardOutput };

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

gitignore prompt.yaml, prompt.md and change.sh Note that they are already added to git.
Before executing the change:
  - Create a new dir prompt/history/[year]/[month]/[day]/[time]_[goal]/
  - Use the current date and the goal variable set in the change script by a line goal=""[goal]""
  - Copy the newly gitignored files to the new dir and log ""Audit trail saved to [dir path]""



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx file accordingly!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.016666666666666666,0.030372650168447275,32.43454948045371
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

integrations/vscode/src/writePromptFile.ts:
```
import * as vscode from 'vscode';
import * as yaml from 'js-yaml';

export const writePromptFile = async (filePath: string, data: any) => {
    let openedDocument = vscode.workspace.textDocuments.find(doc => doc.fileName === filePath);
    if (!openedDocument) {
        openedDocument = await vscode.workspace.openTextDocument(filePath);
    }
    
    const edit = new vscode.WorkspaceEdit();
    const range = new vscode.Range(new vscode.Position(0, 0), new vscode.Position(openedDocument.lineCount, 0));
    edit.replace(openedDocument.uri, range, yaml.dump(data));
    await vscode.workspace.applyEdit(edit);
    
    // Save the document unconditionally.
    openedDocument.save();
    
    // Make the prompt.yaml the active document.
    vscode.window.showTextDocument(openedDocument);
};

```

integrations/vscode/src/writeAttention.ts:
```
import * as vscode from 'vscode';
import * as yaml from 'js-yaml';
import { getRootWorkspace } from './getRootWorkspace';
import { getPromptFilePath } from './getPromptFilePath';
import { getCurrentOpenDocuments } from './getCurrentOpenDocuments';
import { readPromptFile } from './readPromptFile';
import { filterAttentionExcludes } from './filterAttentionExcludes';
import { writePromptFile } from './writePromptFile';
import { PromptFile } from './types';

export const writeAttention = async () => {
    const rootFolder = getRootWorkspace();
    if (!rootFolder) {
        return;
    }

    const promptFilePath = getPromptFilePath(rootFolder);
    const excludeList = vscode.workspace.getConfiguration('junior').get('attentionExcludeList', []);
    try {
        if (promptFilePath) {
            const currentWindows = getCurrentOpenDocuments(rootFolder);
            const attentionSection = filterAttentionExcludes(currentWindows, excludeList, rootFolder);
            const promptFile: PromptFile = await readPromptFile(promptFilePath);
            promptFile.attention = attentionSection;
            writePromptFile(promptFilePath, promptFile);
        } else {
            vscode.window.showErrorMessage('No prompt.yaml file found in the project root!');
        }
    } catch (error) {
        vscode.window.showErrorMessage('Error updating the prompt.yaml file!');
    }
};

```

integrations/vscode/src/types.ts:
```
export interface PromptFile {
    attention?: string[];
    [key: string]: any;  // Allow additional properties
}

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Directories are entries in the attention that end with /
When overwriting the attention, preserve the directory entries in it.



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx file accordingly!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.1125,0.7895379118171689,44.034077712607996
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

integrations/vscode/src/writeAttention.ts:
```
import * as vscode from 'vscode';
import * as yaml from 'js-yaml';
import { getRootWorkspace } from './getRootWorkspace';
import { getPromptFilePath } from './getPromptFilePath';
import { getCurrentOpenDocuments } from './getCurrentOpenDocuments';
import { readPromptFile } from './readPromptFile';
import { writePromptFile } from './writePromptFile';
import { filterAttentionExcludes } from './filterAttentionExcludes';
import { updateEditorContents } from './updateEditorContents';
import { PromptFile } from './types';

export const writeAttention = async () => {
    const rootFolder = getRootWorkspace();
    if (!rootFolder) {
        return;
    }

    const promptFilePath = getPromptFilePath(rootFolder);
    const excludeList = vscode.workspace.getConfiguration('junior').get('attentionExcludeList', []);
    try {
        if (promptFilePath) {
            const currentWindows = getCurrentOpenDocuments(rootFolder);
            
            const attentionSection = filterAttentionExcludes(currentWindows, excludeList, rootFolder);
            
            const promptFile: PromptFile = await readPromptFile(promptFilePath);
            promptFile.attention = attentionSection;
            
            const newContents = yaml.dump(promptFile);
            await updateEditorContents(promptFilePath, newContents);
            
            writePromptFile(promptFilePath, promptFile);
            
            vscode.window.showInformationMessage('Prompt file updated successfully!');
        } else {
            vscode.window.showErrorMessage('No prompt.yaml file found in the project root!');
        }
    } catch (error) {
        vscode.window.showErrorMessage('Error updating the prompt.yaml file!');
    }
};

```

integrations/vscode/src/writePromptFile.ts:
```
import * as fs from 'fs';
import * as yaml from 'js-yaml';

export const writePromptFile = (filePath: string, data: any) => {
    fs.writeFileSync(filePath, yaml.dump(data), 'utf8');
};

```

integrations/vscode/src/readPromptFile.ts:
```
import * as fs from 'fs';
import * as vscode from 'vscode';
import * as yaml from 'js-yaml';
import { PromptFile } from './types';

export const readPromptFile = async (filePath: string): Promise<PromptFile> => {
    const openedDocument = vscode.workspace.textDocuments.find(doc => doc.fileName === filePath);
    if (openedDocument) {
        return yaml.load(openedDocument.getText()) as PromptFile;
    }
    return yaml.load(fs.readFileSync(filePath, 'utf8')) as PromptFile;
};

```

integrations/vscode/src/types.ts:
```
export interface PromptFile {
    attention?: string[];
    [key: string]: any;  // Allow additional properties
}

```


# Task

Fix the following issue!

If the prompt.yaml is opened in the editor, vscode shows it as changed after saving.
We need to fix this: As we write the contents both to the file and the editor buffer,
vscode should show it as unchanged.
Also remove the information message.



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx file accordingly!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.4315352697095436,0.9951380286836875,22.58317958127243
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

integrations/vscode/src/writeAttention.ts:
```
import * as vscode from 'vscode';
import { getRootWorkspace } from './getRootWorkspace';
import { getPromptFilePath } from './getPromptFilePath';
import { getCurrentOpenDocuments } from './getCurrentOpenDocuments';
import { readPromptFile } from './readPromptFile';
import { writePromptFile } from './writePromptFile';
import { updateAttentionSection } from './updateAttentionSection';
import { PromptFile } from './types';

export const writeAttention = async () => {
    const rootFolder = getRootWorkspace();
    if (!rootFolder) {
        return;
    }

    const promptFilePath = getPromptFilePath(rootFolder);
    const excludeList = vscode.workspace.getConfiguration('junior').get('attentionExcludeList', []);
    try {
        if (promptFilePath) {
            const currentWindows = getCurrentOpenDocuments(rootFolder);
            const attentionSection = updateAttentionSection(currentWindows, excludeList, rootFolder);
            const promptFile: PromptFile = readPromptFile(promptFilePath);
            promptFile.attention = attentionSection;
            writePromptFile(promptFilePath, promptFile);
            vscode.window.showInformationMessage('Prompt file updated successfully!');
        } else {
            vscode.window.showErrorMessage('No prompt.yaml file found in the project root!');
        }
    } catch (error) {
        vscode.window.showErrorMessage('Error updating the prompt.yaml file!');
    }
};

```

integrations/vscode/src/types.ts:
```
export interface PromptFile {
    attention?: string[];
    [key: string]: any;  // Allow additional properties
}

```

integrations/vscode/src/updateAttentionSection.ts:
```
import { filterAttentionExcludes } from './filterAttentionExcludes';

export const updateAttentionSection = (currentWindows: string[], excludeList: string[], rootFolder: string) => {
    return filterAttentionExcludes(currentWindows, excludeList, rootFolder);
};

```

integrations/vscode/src/readPromptFile.ts:
```
import * as fs from 'fs';
import * as yaml from 'js-yaml';
import { PromptFile } from './types';

export const readPromptFile = (filePath: string): PromptFile => {
    return yaml.load(fs.readFileSync(filePath, 'utf8')) as PromptFile;
};

```

integrations/vscode/src/writePromptFile.ts:
```
import * as fs from 'fs';
import * as yaml from 'js-yaml';

export const writePromptFile = (filePath: string, data: any) => {
    fs.writeFileSync(filePath, yaml.dump(data), 'utf8');
};

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

When prompt.yaml is opened in vscode, it should be updated in the editor before writing the underlying file.



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx file accordingly!


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.14068441064638784,0.9947110039865044,38.80721582386451
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

integrations/vscode/src/writeAttention.ts:
```
import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';
import * as yaml from 'js-yaml';
import { filterAttentionExcludes } from './filterAttentionExcludes';

export const writeAttention = async () => {
    const workspaceFolders = vscode.workspace.workspaceFolders;
    if (workspaceFolders === undefined) {
        return;
    }
    
    const rootFolder = workspaceFolders[0].uri.fsPath;
    const promptFilePath = path.join(rootFolder, 'prompt.yaml');
    const excludeList = vscode.workspace.getConfiguration('junior').get('attentionExcludeList', []);
    try {
        if (fs.existsSync(promptFilePath)) {
            const currentWindows = vscode.workspace.textDocuments.map(doc => path.relative(rootFolder, doc.fileName));
            const filteredWindows = filterAttentionExcludes(currentWindows, excludeList, rootFolder);
            const promptFile: any = yaml.load(fs.readFileSync(promptFilePath, 'utf8'));
            promptFile.attention = filteredWindows;
            fs.writeFileSync(promptFilePath, yaml.dump(promptFile), 'utf8');
            vscode.window.showInformationMessage('Prompt file updated successfully!');
        } else {
            vscode.window.showErrorMessage('No prompt.yaml file found in the project root!');
        }
    } catch (error) {
        vscode.window.showErrorMessage('Error updating the prompt.yaml file!');
    }
};

```


# Task

## Refactor by split

A file is too big. We need to split it into parts.
Identify the possible parts and refactor the code in separate files!

getRootWorkspace(): Returns the root of the current VSCode workspace.
getPromptFilePath(rootFolder: string): Takes the root folder and returns the path to the prompt.yaml file.
getCurrentOpenDocuments(rootFolder: string): Returns a list of currently open text documents relative to the root workspace.
readPromptFile(filePath: string): Reads and parses the prompt.yaml file, returning its content.
writePromptFile(filePath: string, data: any): Writes the updated data back to the prompt.yaml file.
updateAttentionSection(currentWindows: string[], excludeList: string[], rootFolder: string): Takes in the list of open documents, the exclusion list, and the root folder, then filters and returns the updated ""attention"" list.



# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.5338983050847458,0.9884704845492314,17.08800749063506
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

docs/README.md:
```
Warn: This README is AI generated, just like all the source files of this project.

# Junior - Your AI-first IDE 

[![Video: Junior codes itself](/assets/video_cover.jpg)](https://youtu.be/NL4uFJSvfW0)

*""Video: Junior codes itself""*

Junior is an innovative **AI-first IDE** built to harness the full power of language models. With a setup reminiscent of how Linus Torvalds oversees the Linux Kernel development without writing the code himself, Junior offers a space for developers to communicate directly with AI and actively supervise the entire development process.

Guided by the spirit of craftsmanship, Junior is not only configurable and hackable but also simple and auditable. Our vision is to propel Junior into the same league as iconic tools such as git - another masterpiece by Linus, and the legendary LISP, a language revered by Paul Graham for its significance in enabling rapid development.

By offering specific task details through a prompt descriptor and spotlighting pertinent parts of your project, you can entrust tasks like code implementation, documentation, testing, and more, all to your AI Junior.

## Getting Started

For more insights on getting started, kindly refer to [usage.md](usage.md).

## Contributing and Support

Your contributions are invaluable! Bear in mind, we practice what we preach here. Junior is engineered to be self-reliant. As a contributor, your primary task will be to monitor the proceedings, provide comprehensive prompts, and rigorously review the outcomes.

For assistance, feel free to raise an issue in our GitHub repository.

**Note:** To experience the best results, it's advised to utilize the GPT-4 model or its latest successors.


```


# Task

Improve the documentation!

Make Getting Started and Contributing and Support a bit less hyping.
Change the note at the end to say we test with that model only, but you can try out similarly capable models and report your success. It will not work with 3.5 (reword if needed)


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.03488372093023256,0.458201178974298,18.110770276274835
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

src/frontend/startVite.js:
```
import path from 'path';
import { fileURLToPath } from 'url';
import { createServer } from 'vite';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const projectRoot = path.resolve(__dirname, '../..');

export async function startVite() {
  const server = await createServer({
    root: projectRoot + '/src/frontend',
    server: {
      open: true,
    },
  });
  await server.listen();
  server.printUrls();
}

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Set the &#34;host&#34; boolean config based on the presence of the --host cli argument.



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs*, edit .jsx file accordingly


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.3722627737226277,0.6899298516163341,31.416556144810016
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

src/frontend/App.jsx:
```
import useKeyBindings from './service/useKeyBindings';
import keyBindings from './config/keyBindings';
import NavBar from './components/NavBar';
import PromptCreation from './components/PromptCreation';
import ChangeExecution from './components/ChangeExecution';
import ChangeInspection from './components/ChangeInspection';
import ChangeFinalization from './components/ChangeFinalization';

const App = () => {
  const bindings = keyBindings();
  useKeyBindings(bindings);

  return (
    <div>
      <div class=""bg-main max-w-desktop lg:max-w-desktop md:max-w-full sm:max-w-full xs:max-w-full mx-auto flex flex-col items-center space-y-8 px-2 sm:px-4 xs:px-4"">
        <NavBar />
        <PromptCreation />
        <ChangeExecution />
        <ChangeInspection />
        <ChangeFinalization />
      </div>
    </div>
  );
};

export default App;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

We need a padding at the bottom.
Additionally, always make the content full-height.



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs*, edit .jsx file accordingly


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.09090909090909091,0.05763316477658436,18.466185312619388
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

src/frontend/App.jsx:
```
import useKeyBindings from './service/useKeyBindings';
import keyBindings from './config/keyBindings';
import NavBar from './components/NavBar';
import PromptCreation from './components/PromptCreation';
import ChangeExecution from './components/ChangeExecution';
import ChangeInspection from './components/ChangeInspection';
import ChangeFinalization from './components/ChangeFinalization';

const App = () => {
  const bindings = keyBindings();
  useKeyBindings(bindings);

  return (
    <div class=""p-2 sm:p-4 xs:p-4"">
      <div class=""bg-main max-w-desktop lg:max-w-desktop md:max-w-full sm:max-w-full xs:max-w-full mx-auto flex flex-col items-center space-y-8 sm:p-0"">
        <NavBar />
        <PromptCreation />
        <ChangeExecution />
        <ChangeInspection />
        <ChangeFinalization />
      </div>
    </div>
  );
};

export default App;

```

src/frontend/index.html:
```
<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"">
  <link rel=""icon"" href=""/assets/favicon.ico"" type=""image/x-icon"">
  <title>Junior</title>
</head>
<body>
  <div id=""app"" class=""bg-emphasize""></div>
  <script type=""module"" src=""/index.jsx""></script>
</body>
</html>

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

There is a margin around the content which should be removed.
A horizontal padding should be added instead.



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs*, edit .jsx file accordingly


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.296551724137931,0.976841717734822,22.956480566497994
"You are Junior, an AI system aiding developers.
You are working with a part of a large program called the ""Working Set.""
Before starting, check if you need more files to solve the task.
Do not edit files without knowing their contents!
Ask for them in normal conversational format instead.

# Working set

src/frontend/components/TasksList.jsx:
```
import { onMount, createEffect } from 'solid-js';
import { fetchTasks } from '../fetchTasks';
import { handleTaskChange } from '../service/handleTaskChange';
import { selectedTask, setSelectedTask } from '../model/selectedTask';
import { promptDescriptor } from '../model/promptDescriptor';
import { parseYamlAndGetTask } from '../service/parseYamlAndGetTask';

const TasksList = () => {
  const tasks = fetchTasks();

  createEffect(() => {
    const descriptor = promptDescriptor();
    if (descriptor !== '') {
      const task = parseYamlAndGetTask(descriptor);
      setSelectedTask(task);
    }
  });

  return (
    <div class=""w-full flex justify-start bg-emphasize text-emphasize p-2 rounded border border-gray-300"">
      <label class=""text-lg mr-2"">Task:</label>
      <select class=""w-full bg-emphasize text-emphasize text-lg"" value={selectedTask()} onChange={e => handleTaskChange(e)}>
        {tasks().map(task => <option value={task}>{task}</option>)}
      </select>
    </div>
  );
};

export default TasksList;

```

src/frontend/tailwind.config.cjs:
```
module.exports = {
  darkMode: 'class',
  content: [__dirname + '/**/*.html', __dirname + '/**/*.jsx'],
  theme: {
    screens: {
      'xs': '320px',
      'sm': '640px',
      'md': '768px',
      'lg': '1024px',
    },
    extend: {
      spacing: {
        '72': '18rem',
        '84': '21rem',
        '96': '24rem',
        '128': '32rem',
      },
      fontSize: {
        'btn': '1.5rem',
        'lg': '1.125rem',
      },
      padding: {
        'btn': '1.5rem',
      },
      maxWidth: {
        'desktop': '640px',
      },
      colors: {
        text: ""var(--text-color)"",
        emphasize: ""var(--emphasize-color)"",
        bg: ""var(--background-color)"",
      },
      backgroundColor: {
        main: ""var(--background-color)"",
        emphasize: ""var(--background-emphasize-color)"",
      },
    },
  },
  variants: {
    extend: {},
  },
  plugins: [],
}

```

src/frontend/styles/colors.css:
```
:root {
  --text-color: #1a202c;
  --background-color: #f7fafc;
  --emphasize-color: #16181f;
  --background-emphasize-color: #f2f4f6;
}

.dark {
  --text-color: #f7fafc;
  --background-color: #1a202c;
  --emphasize-color: #f2f4f6;
  --background-emphasize-color: #141618;
}

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Introduce a new color for borders and use it!
The current bg-gray-300 is good for the light them but we need another one with less contrast for the dark.



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs*, edit .jsx file accordingly


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.06132075471698113,0.03527712068602743,41.701318923986086
"You are AI Junior, you code like Donald Knuth.

# Working set

./docs/web.md:
```
# Web Interface

Junior's web interface was designed for use with ChatGPT Pro and doesn't require an API key.

## Architecture

The web interface is composed of two different servers: a frontend and a backend. The frontend server runs on port 5864, and the backend server runs on port 10101.

## Starting the Web Interface

Run the application with `junior-web` from your project. A web browser window will automatically open at `http://localhost:5864`, which is where you can access the web interface.

For configuration options and details, refer to the [Configuration](./config/env_or_cli.md) documentation.

## Workflow

The typical workflow begins with editing the `prompt.yaml` file in your code editor of choice (we recommend Visual Studio Code with the Junior plugin for an optimal experience). Once you're satisfied with your task setup, you proceed to the web interface for execution and monitoring.

## Usage

The web interface has a few interactive components:

![Web Interface](./screenshot.png)

- **Generate & Copy Prompt button (Blue)**: Click this to generate a task prompt based on your `prompt.yaml` file and copy it to your clipboard. The copied prompt should be pasted to ChatGPT 4 or similar for execution.

- **Paste & Execute Change button (Orange)**: Paste the response from the AI model (a shell script) into the input field and click this button to execute the changes.

- **Roll Back to Last Commit button (Red)**: If you made a mistake or aren't happy with the changes, click this button to revert to the last commit. Please note, the rollback operation preserves the `prompt.yaml` file, but drops every change since the last commit, including new files created in the meantime, even if they were not created by Junior.

- **Commit Changes button (Green)**: After you're satisfied with your changes, click this button to commit your modifications to git.

- **Terminal**: Displays the output of your command execution. It's a simple console that shows the progress of the task.

For a more detailed guide on using the web interface, refer to our video tutorial [here](https://youtu.be/W_iwry8uT7E).

Remember, you can always refer to your `prompt.yaml` file to modify the task details or attention mechanism.

Happy developing with your AI contributor!

```

# Task

Improve the documentation!

- Fix the naming of ChatGPT Plus (not Pro)
- Remove the architecture section
- Rewrite the workflow section: Editing prompt.yaml directly is not needed anymore, remove. The current workflow is: Starting junior-web from the project dir, entering the requirements, selecting the attention files, generating the prompt, executing it with ChatGPT and pasting back the output for execution.

Do NOT create backup files.

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END

",0.11486486486486487,0.724791302777298,29.597297173897484
"You are Junior, an AI system aiding developers. You are working with a part of a large program called the ""Working Set."" Ask for contents of subdirectories if needed. Some files are printed in the working set. Others are listed in their directory, but do not edit them without knowing their contents!

# Working set

package.json:
```
{
  ""name"": ""@aijunior/dev"",
  ""version"": ""0.1.3"",
  ""description"": ""Your AI Contributor which codes itself"",
  ""type"": ""module"",
  ""main"": ""src/main.js"",
  ""bin"": {
    ""junior"": ""src/main.js"",
    ""junior-web"": ""src/web.js"",
    ""junior-init"": ""src/init.js""
  },
  ""scripts"": {
    ""cli"": ""node src/main.js"",
    ""start"": ""node src/web.js"",
    ""build:css"": ""postcss ./src/frontend/styles.css -o ./dist/styles.css"",
    ""update-logo"": ""node ./scripts/updateLogo.js"",
    ""delete-branches"": ""node ./scripts/clearBranchesCommand.js""
  },
  ""keywords"": [
    ""cli"",
    ""uppercase""
  ],
  ""author"": """",
  ""license"": ""GPL"",
  ""dependencies"": {
    ""@types/js-yaml"": ""^4.0.5"",
    ""autoprefixer"": ""^10.4.14"",
    ""chatgpt"": ""^5.2.4"",
    ""cors"": ""^2.8.5"",
    ""docsify-cli"": ""^4.4.4"",
    ""ejs"": ""^3.1.9"",
    ""express"": ""^4.18.2"",
    ""highlight.js"": ""^11.8.0"",
    ""js-yaml"": ""^4.1.0"",
    ""markdown-it"": ""^13.0.1"",
    ""marked"": ""^5.1.0"",
    ""postcss"": ""^8.4.26"",
    ""postcss-nested"": ""^6.0.1"",
    ""sharp"": ""^0.32.4"",
    ""simple-git"": ""^3.19.1"",
    ""solid-js"": ""^1.7.7"",
    ""tailwindcss"": ""^3.3.3"",
    ""vite"": ""^4.3.9"",
    ""vite-plugin-solid"": ""^2.7.0"",
    ""ws"": ""^8.13.0""
  },
  ""directories"": {
    ""doc"": ""docs""
  },
  ""repository"": {
    ""type"": ""git"",
    ""url"": ""git+https://github.com/tisztamo/Junior.git""
  },
  ""bugs"": {
    ""url"": ""https://github.com/tisztamo/Junior/issues""
  },
  ""homepage"": ""https://github.com/tisztamo/Junior#readme""
}

```

src/git/clearBranches.js:
```
import { promisify } from 'util';
import { exec as execCb } from 'child_process';

const exec = promisify(execCb);

export default async function deleteBranches(exceptions = []) {
  try {
    const { stdout: currentBranch } = await exec('git rev-parse --abbrev-ref HEAD');
    const { stdout: allBranches } = await exec('git for-each-ref --format=""%(refname:short)"" refs/heads');

    const branches = allBranches.split('\n').filter(branch => branch !== currentBranch.trim() && !exceptions.includes(branch));

    for (const branch of branches) {
      await executeCommand(`git branch -d ${branch}`);
    }
  } catch (err) {
    console.error(`An error occurred: ${err}`);
  }
}

async function executeCommand(command) {
  try {
    console.log(`Running command: ${command}`);
    const { stdout } = await exec(command);
    console.log(`stdout: ${stdout}`);
  } catch (err) {
    throw err;
  }
}

```


# Task

Move the following files to the specified target dirs!

Find out the best target dir if it is not specified!

You need to follow dependencies to maintain coherence.

Before executing, write a concise plan! The plan should show:
 - How do you avoid breaking other parts of the code.
 - If you had to choose, your way of thinking.

rename delete-branches to clear-branches
rename deleteBranches to clearBranches


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.10714285714285714,0.4625036318536765,46.195237849804386
"You are Junior, an AI system aiding developers. You are working with a part of a large program called the ""Working Set."" Ask for contents of subdirectories if needed. Some files are printed in the working set. Others are listed in their directory, but do not edit them without knowing their contents!

# Working set

src/execute/extractCode.js:
```
function extractCode(res) {
  const match = res.match(/```(sh|bash)([\s\S]*?)```/);
  return match ? match[2].trim() : null;
}

export { extractCode };

```

src/backend/handlers/executeHandler.js:
```
import { executeAndForwardOutput } from '../../execute/executeAndForwardOutput.js';

function executeHandler(req, res) {
  executeAndForwardOutput(req.body.change, (result, output) => {
    res.json({ result, output });
  });
}

export { executeHandler };

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Extract the code from the change before executing!



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs*, edit .jsx file accordingly


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.3026315789473684,0.7292215225648326,38.63935817272331
"# Working set

docs/README.md:
```
Warn: This README is AI generated, just like all the source files of this project.

# Junior - Your AI contributor which codes itself.

[![Video: Junior codes itself](/assets/video_cover.jpg)](https://www.youtube.com/watch?v=W_iwry8uT7E)

*""Video: Junior codes itself""*
## Description

Junior is an exploratory project aimed at revolutionizing the way programmers interact with the development process. Just like how Linus Torvalds oversees the Linux Kernel development without coding himself, this project allows developers to communicate with the AI and supervise the development process.

Isn't that already possible with ChatGPT? No, LLMs have very limited ""working memory"", so it is not possible to directly work with them on large codebases.

By providing specific task details in a prompt descriptor and highlighting the relevant parts of your project, you can delegate code implementation, documentation, testing, and more to your AI Junior.

## Getting Started

### Installation

To install, clone the repository and run `npm install` in the root directory. Additionally, you can install the ""Junior"" vscode extension from the vscode extension marketplace.

### Usage

#### Web Interface

Run the application with `npm start` to start a local server, where you can generate a prompt and automatically copy it to paste into ChatGPT. The web interface is designed for use with ChatGPT Pro and doesn't require an API key. For more information about the web interface, please refer to [doc/web.md](doc/web.md).

#### Command-line interface (CLI)

To start the CLI, use `npm run cli`. This mode uses the ChatGPT API, and you'll need an API key stored in the `OPENAI_API_KEY` environment variable.

### The Prompt Descriptor

The prompt descriptor is a YAML file that outlines the details necessary for generating a task prompt for the AI model. For more details, refer to [descriptor.md](descriptor.md).

### Attention Mechanism

The attention mechanism guides the AI model by providing it with a working set. It helps overcome the limited working memory of large language models.

The working set is a subset of the entire project that's currently in focus. It includes both files and directories. For files, the content is directly provided to the AI. For directories, a brief list of files and subdirectories within them is presented.

## Contributing and Support

Contributions are welcome! Remember, we eat our own dog food in this project. Junior is designed to write itself. Your main role will be to oversee the work, provide detailed prompts, and review the outcomes.

For support, please create an issue in the GitHub repository.

**Note:** For meaningful results, it's recommended to use the GPT-4 model or a more recent version.


```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

- Remove every detail and subsection from &#34;## Getting Started&#34; - Instead add a link to usage.md &#34;usage&#34;, in short call-to-action sentence. The file already exists, do not edit.



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs*, edit .jsx file accordingly


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.09666666666666666,0.38280680066830475,41.182520563948
"You are AI Junior, you code like Donald Knuth.

# Working set

./src/frontend/components/terminal/TerminalSummary.jsx:
```
import { createEffect, createSignal } from 'solid-js';
import { prependAndExtractLastLine } from './prependAndExtractLastLine';

export function TerminalSummary(props) {
  const [lastLineSignal, setLastLineSignal] = createSignal("""");
  let localLastLine = """";

  createEffect(() => {
    localLastLine = prependAndExtractLastLine(localLastLine, props.lastWritten);
    if (localLastLine !== """") {
      setLastLineSignal(localLastLine);
    }
  });

  return <span>{lastLineSignal()}</span>;
}

```
./src/frontend/components/terminal/TerminalComponent.jsx:
```
import { onCleanup, onMount, createSignal } from 'solid-js';
import 'xterm/css/xterm.css';
import terminalConnection from '../../service/terminal/terminalConnection';
import { setupXTerm } from '../../service/terminal/setupXTerm';
import { sendTerminalResizeNotification } from '../../service/terminal/sendTerminalResizeNotification';
import DetailsComponent from '../DetailsComponent';
import VirtualKey from './VirtualKey';
import terminalVirtualKeyBindings from '../../config/terminalVirtualKeyBindings';
import { TerminalSummary } from './TerminalSummary';

const TerminalComponent = () => {
  let container;
  const [lastWritten, setLastWritten] = createSignal('');
  const { term, fitAddon } = setupXTerm();

  const sendVirtualKey = (key) => {
    terminalConnection.sendDataToTerminal(JSON.stringify({ type: 'input', data: key }));
    term.focus();
  };

  onMount(() => {
    term.open(container);
    fitAddon.fit();

    const { rows, cols } = term;
    sendTerminalResizeNotification(rows, cols);

    terminalConnection.setOnDataReceived((data) => {
      term.write(data);
      setLastWritten(data); // Update the lastWritten signal on data receive
    });

    term.onData((data) => {
      terminalConnection.sendDataToTerminal(JSON.stringify({ type: 'input', data }));
    });

    term.onResize(({ newRows, newCols }) => {
      sendTerminalResizeNotification(newRows, newCols);
    });
  });
  
  onCleanup(() => {
    term.dispose();
    terminalConnection.closeConnection();
  });

  return (
    <DetailsComponent 
      defaultState=""closed""
      localStorageKey=""terminalState""
      generateHeader={() => <>Terminal <TerminalSummary lastWritten={lastWritten()} /></>}  // Use TerminalSummary here
      classes=""rounded border p-2 w-full border-border bg-emphasize""
    >
      <div ref={container}></div>
      <div class=""flex overflow-x-auto whitespace-nowrap"">
        {terminalVirtualKeyBindings().map(({ label, action }) => (
          <VirtualKey label={label} action={() => sendVirtualKey(action)} />
        ))}
      </div>
    </DetailsComponent>
  );
};

export default TerminalComponent;

```

# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

When the user presses enter, also write it to the summary as local echo.


## Project Specifics

- Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

Write concise, self-documenting and idiomatic ES6 code!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END

",0.445859872611465,0.9941217843055423,42.91852746774987
"# Working set

```
src/frontend/
├── App.jsx
├── assets/...
├── components/...
├── fetchTasks.js
├── generatePrompt.js
├── getBaseUrl.js
├── index.html
├── index.jsx
├── postcss.config.cjs
├── service/...
├── startVite.js
├── stores/...
├── styles/...
├── tailwind.config.cjs
├── vite.config.js

```
```
src/frontend/stores/
├── change.js
├── commitMessage.js
├── executionResult.js
├── gitStatus.js
├── monitorChange.js
├── prompt.js
├── promptDescriptor.js
├── selectedTask.js

```

# Task

Move the following files to the specified target dirs!

Find out the best target dir if it is not specified!

You need to follow dependencies to maintain coherence.

Before executing, write a concise plan! The plan should show:
 - How do you avoid breaking other parts of the code.
 - If you had to choose, your way of thinking.

Rename src/frontend/stores to src/frontend/model


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, prefer heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.07092198581560284,0.4608649066318873,81.83520025025906
"# Working set

src/frontend/components/CommitMessageInput.jsx:
```
import { commitMessage, setCommitMessage } from '../stores/commitMessage';

const CommitMessageInput = (props) => {
  const handleChange = (e) => {
    setCommitMessage(e.target.value);
  };

  return (
    <input type=""text"" className=""w-64 px-4 py-2 border rounded"" placeholder=""Commit message..."" onInput={handleChange} />
  );
};

export default CommitMessageInput;

```

src/frontend/stores/commitMessage.js:
```
import { createSignal } from 'solid-js';

const [commitMessage, setCommitMessage] = createSignal('');

export { commitMessage, setCommitMessage };

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

When I set the commit message, the input should be updated.



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs*, edit .jsx file accordingly


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, prefer heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.4107142857142857,0.8395283746787303,21.354156504062622
"You are AI Junior, you code like Donald Knuth.

# Working set

./docs/config/env_or_cli.md:
```
# Junior Configuration

The Junior process can be started using the following commands:
- `npx junior-web [args]`
- `npx junior-cli [args]`
- For self-development from the git repo: `npm start -- [args]`.

## Configurations

- **--ignore, JUNIOR_IGNORE**
  - List of items to ignore.
  - Example: `--ignore=./pathToIgnore`

- **--server-port, JUNIOR_SERVER_PORT**
  - The port for the server.
  - Default: 10101
  - Example: `--server-port=8080`

- **--host**
  - Host configuration. If provided without a value, it enables the host. Otherwise, specify an IP.
  - Example: `--host` or `--host=192.168.1.2`

- **-d, --dry-run**
  - Runs the application in dry run mode.

- **--model**
  - Specifies the model to be used.
  - Default: gpt-4
  - Example: `--model=gpt-5`

- **--noaudit**
  - Disables the audit trail.

- **--frontend-port, JUNIOR_FRONTEND_PORT**
  - The port for the frontend.
  - Default: 5864
  - Example: `--frontend-port=8081`

- **--system-prompt, -s**
  - Forces the system prompt.

- **--prompt**
  - Flag related to the prompt configuration.

## Examples

### Hosting on a VPN IP
```
npx junior-web --host=192.168.1.2
```

### Ignoring a Directory from Attention Scan
```
npx junior-cli --ignore=./myDirectory
```

```
./src/backend/fileutils/getIgnoreList.js:
```
function getIgnoreList() {
  const DEFAULT_IGNORE = [
    '.git',
    'node_modules',
    './prompt',
    'dist',
    'build',
    'tmp',
    'temp',
    '.vscode',
    '.idea',
    'coverage',
    '.env',
    '.DS_Store',
    'logs',
    'package-lock.json',
    'yarn.lock',
    '*.pyc',
    '__pycache__',
    '.venv',
    'venv',
    'target',
    '*.class',
    '*.exe',
    '*.test',
    'vendor/',
    '*.gem',
    '.bundle',
    'Gemfile.lock',
    'Cargo.lock',
    'bin/',
    'obj/',
    '*.suo',
    '*.user',
    '*.xcodeproj',
    '*.xcworkspace',
    'Pods/',
    'pubspec.lock',
    '.dart_tool/',
    'out/',
    '*.tsbuildinfo',
    '*.Rproj.user',
    '*.Rhistory',
    '*.pl~',
    'cpanfile.snapshot',
    'project/',
    'dist/',
    '*.hi',
    '_build/',
    'deps/',
    '*.log',
    '*.asv'
  ];

  const cliArgs = process.argv.slice(2);
  const cliIgnore = cliArgs
    .filter(arg => arg.startsWith('--ignore='))
    .map(arg => arg.replace('--ignore=', '').split(','))
    .flat();

  const envIgnore = process.env.JUNIOR_IGNORE ? process.env.JUNIOR_IGNORE.split(',') : [];

  const totalIgnore = [...DEFAULT_IGNORE, ...cliIgnore, ...envIgnore];

  const nameIgnore = totalIgnore.filter(item => !item.startsWith('./'));
  const pathIgnore = totalIgnore.filter(item => item.startsWith('./')).map(item => item.slice(2));

  return { nameIgnore, pathIgnore };
}

export default getIgnoreList;

```
./src/prompt/getPromptFlag.js:
```
function getPromptFlag() {
  const promptFlag = process.argv.find(arg => arg.startsWith(""--prompt=""));
  if (promptFlag) {
    return promptFlag.split(""="")[1];
  }
}

export { getPromptFlag };

```

# Task

Improve the documentation!

Add more info:

1. --ignore accepts a comma-separated list of paths to be ignored from the attention scan. List the defaults and describe how the different sources are merged.

2. the --prompt flag is not used, remove from the docs and delete getPromptFlag.js

3. -s and -d and their long variants are only used in the cli. Spearate them and add a note that the cli is not fully functional at the time.

Do NOT create backup files.

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END

",0.29330254041570436,0.5879268353970359,31.22498999199199
"You are AI Junior, you code like Donald Knuth.

# Working set

./docs/_coverpage.md:
```
# <span class=""cover-color-blue"">**You are the Pro,**</span> <span class=""cover-color-orange"">**Junior&nbsp;codes**</span>

Kraft code with the **Junior AI IDE**

<span class=""cover-color-red"">Works on large codebases,</span> <span class=""cover-color-green"">soon on your mobile phone.</span>

![](assets/logo.svg)

```

# Task

Improve the documentation!

Add a new line at the end of the cover page, in black:

Scroll

Add unicode upwards icons before and after the text

Do NOT create backup files.

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END

",0.19727891156462585,0.7303757242243912,20.518284528683193
"You are AI Junior, you code like Donald Knuth.

# Working set

./src/frontend/components/getStyleForFileStatus.jsx:
```
export default function getStyleForFileStatus(working_dir, path) {
  if (working_dir === 'M') {
    return { color: 'rgb(34, 197, 94)' };
  } else if (working_dir === 'A' && !path.includes('prompt/history')) {
    return { color: 'rgb(253, 186, 116)' };
  }
  return {}; // Default no text color style
}

```
./src/frontend/styles/colors.css:
```
:root {
  --text-color: #1a202c;
  --background-color: #f7fafc;
  --emphasize-color: #16181f;
  --background-emphasize-color: #f2f4f6;
  --border-color: #d1d5db;
}

.dark {
  --text-color: #f7fafc;
  --background-color: #1a202c;
  --emphasize-color: #f2f4f6;
  --background-emphasize-color: #141618;
  --border-color: #4a5568;
}

```
./docs/assets/styles.css:
```
.app-name-link img {
  max-width: 70px;
}

iframe {
  margin: 16px;
}

/* Adding logo colors to cover page */
.cover-color-blue {
  color: rgb(59, 130, 246) !important;
}

.cover-color-orange {
  color: rgb(253, 186, 116) !important;
}

.cover-color-red {
  color: rgb(185, 28, 28) !important;
}
.cover-color-green {
  color: rgb(21, 128, 61) !important;
}

```

# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

1. Create variables color-blue, color-orange. color-red, color-green in colors.css based on the colors in the docs styles
2. Use the variables in the styles returned for file status



## Project Specifics

- Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END

",0.09235668789808917,0.5165184576451568,31.670175244226233
"You are AI Junior, you code like Donald Knuth.

# Working set

./src/frontend/components/files/FileViewer.jsx:
```
import SourceFileDisplay from '../files/SourceFileDisplay';

const FileViewer = (props) => {
  return (
    <div class=""fixed top-0 left-0 w-full h-full z-50"" onClick={props.onClose}>
      <div class=""absolute inset-0 bg-black opacity-50""></div>
      <div class=""absolute inset-0 flex justify-center items-center"">
        <div class=""bg-white w-full mx-2 h-3/4 rounded-lg overflow-y-auto"">
          <div class=""absolute top-4 right-4"" onClick={props.onClose}></div>
          <SourceFileDisplay path={props.path} />
        </div>
      </div>
    </div>
  );
};

export default FileViewer;

```
./src/frontend/components/GitStatusDisplay.jsx:
```
import { onCleanup, onMount, createEffect, createSignal } from 'solid-js';
import GitStatusRow from './GitStatusRow';
import { gitStatus } from '../model/gitStatus';
import { fetchGitStatus } from '../service/fetchGitStatus';

const GitStatusDisplay = () => {
  let [statusMessage, setStatusMessage] = createSignal("""");
  let [fileList, setFileList] = createSignal([]);

  onMount(async () => {
    try {
      await fetchGitStatus();
    } catch (error) {
      setStatusMessage(""Error fetching git status."");
    }
  });

  createEffect(() => {
    const gitStatusValue = gitStatus();
    if (gitStatusValue.error) {
      setStatusMessage(`${gitStatusValue.message}\n${gitStatusValue.error.stderr}`);
    } else if (gitStatusValue.data && gitStatusValue.data.files) {
      setFileList(gitStatusValue.data.files);
    }
  });

  onCleanup(() => {
    // Clean up any listeners or resources tied to this component.
  });

  return (
    <pre class=""rounded overflow-auto max-w-full"">
      {statusMessage()}
      {fileList().map(entry => <GitStatusRow key={entry.path} entry={entry} />)}
    </pre>
  );
};

export default GitStatusDisplay;

```
./src/frontend/components/GitStatusRow.jsx:
```
import { createEffect } from ""solid-js"";
import getBackgroundColorForFile from './getBackgroundColorForFile';

const GitStatusRow = (props) => {
  const { index, path, working_dir } = props.entry;

  // Split the path to get filename and base directory
  const splitPath = path.split('/');
  const fileName = splitPath.pop();
  const baseDir = splitPath.join('/');

  const bgColor = getBackgroundColorForFile(index, path);

  let pathRef; // For scrolling logic

  createEffect(() => { // Incorporate scrolling logic
    if (pathRef) {
      pathRef.scrollLeft = pathRef.scrollWidth;
    }
  });

  // Adjusting styles and incorporating scrolling logic as per ListItem.jsx
  return (
    <div class={`flex ${bgColor ? 'bg-' + bgColor : ''}`}>
      <span class=""w-50px overflow-x-auto p-1"">{index + ' ' + working_dir}</span>
      <span class=""text-base bg-main rounded p-1"">{fileName}</span>
      <span ref={pathRef} class=""overflow-x-auto whitespace-no-wrap break-keep scrollbar-hidden ml-4 py-2 text-sm"">{baseDir}</span>
    </div>
  );
};

export default GitStatusRow;

```

# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Click on git status items should open the file viewer with the file.


## Project Specifics

- Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END

",0.13766233766233765,0.1941039364875448,35.9722114972099
"You are AI Junior, you code like Donald Knuth.

# Working set

./src/frontend/components/terminal/TerminalComponent.jsx:
```
import { onCleanup, onMount } from 'solid-js';
import 'xterm/css/xterm.css';
import terminalConnection from '../../service/terminal/terminalConnection';
import { setupXTerm } from '../../service/terminal/setupXTerm';
import { sendTerminalResizeNotification } from '../../service/terminal/sendTerminalResizeNotification';
import DetailsComponent from '../DetailsComponent';
import VirtualButton from './VirtualButton';

const TerminalComponent = () => {
  let container;
  const { term, fitAddon } = setupXTerm();
  
  const sendVirtualKey = (key) => {
    term.write(key);
  };

  onMount(() => {
    term.open(container);
    fitAddon.fit();

    const { rows, cols } = term;
    sendTerminalResizeNotification(rows, cols);

    terminalConnection.setOnDataReceived((data) => {
      term.write(data);
    });

    term.onData((data) => {
      terminalConnection.sendDataToTerminal(JSON.stringify({ type: 'input', data }));
    });

    term.onResize(({ newRows, newCols }) => {
      sendTerminalResizeNotification(newRows, newCols);
    });
  });
  
  onCleanup(() => {
    term.dispose();
    terminalConnection.closeConnection();
  });

  return (
    <DetailsComponent 
      defaultState=""closed""
      localStorageKey=""terminalState""
      generateHeader={() => ""Terminal""}
      classes=""rounded border p-2 w-full border-border bg-emphasize""
    >
      <div class=""flex overflow-x-auto whitespace-nowrap"">
        <VirtualButton label=""Esc"" action={() => sendVirtualKey('\x1B')} />
        <VirtualButton label=""-"" action={() => sendVirtualKey('-')} />
        <VirtualButton label="":"" action={() => sendVirtualKey(':')} />
        <VirtualButton label=""Ctrl-Z"" action={() => sendVirtualKey('\x1A')} />
        <VirtualButton label=""Ctrl-Y"" action={() => sendVirtualKey('\x19')} />
        <VirtualButton label=""Ctrl-X"" action={() => sendVirtualKey('\x18')} />
        <VirtualButton label=""Ctrl-V"" action={() => sendVirtualKey('\x16')} />
        <VirtualButton label=""F1"" action={() => sendVirtualKey('\x1BOP')} />
        <VirtualButton label=""F5"" action={() => sendVirtualKey('\x1B[15~')} />
        <VirtualButton label=""F6"" action={() => sendVirtualKey('\x1B[17~')} />
        <VirtualButton label=""F7"" action={() => sendVirtualKey('\x1B[18~')} />
      </div>
      <div ref={container}>
        {/* The terminal will be rendered inside this div */}
      </div>
    </DetailsComponent>
  );
};

export default TerminalComponent;

```
./src/frontend/components/terminal/VirtualButton.jsx:
```
import { createSignal } from 'solid-js';

const VirtualButton = (props) => {
  const sendKey = () => {
    if (props.action) {
      props.action();
    }
  };

  return (
    <button
      className=""m-1 bg-main hover:bg-blue-700 text-white font-bold py-1 px-2 rounded""
      onClick={sendKey}
    >
      {props.label}
    </button>
  );
};

export default VirtualButton;

```

# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

1. The terminal component should send virtual key  codes to the terminal connection, not to xterm.js.
2. Add text-text class to the virtual buttons


## Project Specifics

- Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END

",0.1134020618556701,0.07978552259526128,39.45883931389772
"# Working set

src/init.js:
```
#!/usr/bin/env node
import { execSync } from 'child_process';
import { join } from 'path';
import { createPromptYaml } from './prompt/createPromptYaml.js';
import { createProjectSpecifics } from './prompt/createProjectSpecifics.js';
import { createGitignore } from './git/createGitignore.js';

async function juniorInit() {
  execSync('git init', { stdio: 'inherit' });

  createGitignore();

  execSync('git add .gitignore', { stdio: 'inherit' });
  execSync('git commit -m ""Junior init""', { stdio: 'inherit' });

  createPromptYaml();
  createProjectSpecifics();

  console.log('\x1b[32mRepo initialized for Junior development\x1b[0m');
}

juniorInit();

```

src/prompt/createProjectSpecifics.js:
```
import { writeFileSync } from 'fs';

export function createProjectSpecifics() {
  const markdownContent = `## Project Specifics\n`;

  writeFileSync('./prompt/projectSpecifics.md', markdownContent);
}

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Create the prompt dir if it doesn&#39;t exist. Also commit it.


## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs*, edit .jsx file accordingly


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, prefer heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.15566037735849056,0.3859035872355614,39.68626966596886
"# Working set

src/frontend/components/GitStatusDisplay.jsx:
```
import { onMount, createEffect } from 'solid-js';
import { gitStatus } from '../stores/gitStatus';
import { fetchGitStatus } from '../service/fetchGitStatus';

const GitStatusDisplay = () => {
  let statusContainer;

  onMount(fetchGitStatus);

  createEffect(() => {
    const gitStatusValue = gitStatus();
    if (gitStatusValue) {
      if (gitStatusValue.error && gitStatusValue.error.stderr.includes('Not a git repository')) {
        statusContainer.innerText = 'Not a git repo. Run \'npx junior-init\' to initialize!';
      } else if (gitStatusValue.message && gitStatusValue.message !== '') {
        statusContainer.innerText = gitStatusValue.message;
      }
    }
  });

  return (
    <pre
      ref={statusContainer}
      class={`rounded overflow-auto max-w-full ${gitStatus() && gitStatus().message && gitStatus().message !== '' ? 'block' : 'hidden'}`}
    />
  );
};

export default GitStatusDisplay;

```

src/backend/handlers/gitStatusHandler.js:
```
import gitStatus from '../../git/gitStatus.js';

export default async function gitStatusHandler(req, res) {
  try {
    const status = await gitStatus();
    res.status(200).send({ status });
  } catch (error) {
    res.status(500).send({ message: 'Error in getting Git status', error });
  }
}

```


# Task

Fix the following issue!

1. Move the git status result from the status field of the response to the message field.
2. When the endpoint reports an error in the error field similar to this (check stderr for &#34;Not a git repository&#34;):
{
  &#34;message&#34;: &#34;Error in getting Git status&#34;,
  &#34;error&#34;: {
    &#34;code&#34;: 128,
    &#34;killed&#34;: false,
    &#34;signal&#34;: null,
    &#34;cmd&#34;: &#34;git status --porcelain=v1&#34;,
    &#34;stdout&#34;: &#34;&#34;,
    &#34;stderr&#34;: &#34;fatal: Not a git repository (or any of the parent directories): .git\n&#34;
  }
}
then display &#34;Not a git repo. Run &#39;npx junior-init&#39; to initialize!&#34;.


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, prefer heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.14465408805031446,0.7870811616985797,22.58317958127243
"You are AI Junior, you code like Donald Knuth.

# Working set

./docs/index.html:
```
<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <title>Document</title>
  <meta http-equiv=""X-UA-Compatible"" content=""IE=edge,chrome=1"" />
  <meta name=""description"" content=""Description"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0, minimum-scale=1.0"">
  <link rel=""icon"" href=""assets/favicon.ico"" type=""image/x-icon"">
  <link rel=""stylesheet"" href=""//cdn.jsdelivr.net/npm/docsify@4/lib/themes/vue.css"">
  <link rel=""stylesheet"" href=""assets/styles.css"">
</head>
<body>
  <div id=""app""></div>
  <script src=""docsifyConfig.js""></script>
  <!-- Docsify v4 -->
  <script src=""//cdn.jsdelivr.net/npm/docsify@4""></script>
</body>
</html>

```
./docs/README.md:
```
# Junior - Your AI-first IDE 

[![Video: Junior codes itself](/assets/video_cover.jpg)](https://youtu.be/NL4uFJSvfW0)

*""Video: Junior codes itself""*

Junior is an **AI-first IDE** designed specifically for professional programmers who have a preference for customizing and fine-tuning their tools. 

With Junior, developers get a unique space where they can work hand-in-hand with AI throughout the development process. By using structured task descriptors and spotlighting relevant parts of a project, tasks like code implementation, documentation, and testing can be seamlessly delegated to Junior.

At its core, Junior embraces a design philosophy that prioritizes simplicity, configurability, and auditability. This ensures that the platform remains both accessible to its users and adaptable to a variety of use-cases.

Junior has been crafted exclusively with AI-powered coding right from its early days, way before its core functionalities were in place. This demonstrates Junior's pioneering approach to harnessing the potential of artificial intelligence in software development.

## Getting Started

For guidance on using Junior, please refer to [usage.md](usage.md).

## Contributing and Support

Your contributions make a difference! At Junior, we value the collaboration of the community. Your role as a contributor is to monitor the development, provide detailed prompts, and thoroughly review the generated outcomes.

For questions or assistance, please raise an issue in our GitHub repository.

**Note:** We've tested Junior primarily with the GPT-4 model. However, you're welcome to experiment with similarly capable models and share your findings. It's not compatible with GPT-3.5.

```
./docs/_coverpage.md:
```
# <span class=""cover-color-blue"">**You are the Pro,**</span> <span class=""cover-color-orange"">**Junior&nbsp;codes**</span>

Kraft code with the **Junior AI IDE**

<span class=""cover-color-red"">Works on large codebases,</span> <span class=""cover-color-green"">soon on your mobile phone.</span>

![](assets/logo.svg)

```
./docs/_sidebar.md:
```
* [Junior Docs](./README.md)
* [Usage](./usage.md)
* [Web](./web.md)
* [Prompt Descriptor](./descriptor.md)
* [Roadmap](./roadmap.md)
* [Open Jobs](./open_jobs.md)

```

# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Meta/og for docs site


## Project Specifics

- Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: Debian


Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END

",0.2523809523809524,0.7737828493968912,63.2771680782255
create me an ansible role which starts caffeine automatic on boot,0.14885496183206107,0.840105370038693,27.23967694375247
"# Working set

src/backend/setupRoutes.js:
```
import { generateHandler } from './handlers/generateHandler.js';
import { servePromptDescriptor } from './handlers/servePromptDescriptor.js';
import { updateTaskHandler } from './handlers/updateTaskHandler.js';
import { listTasks } from './handlers/listTasks.js';
import { executeHandler } from './handlers/executeHandler.js';
import resetGitHandler from './handlers/resetGitHandler.js';

export function setupRoutes(app) {
  app.get('/descriptor', servePromptDescriptor);
  app.get('/tasks', (req, res) => res.json({ tasks: listTasks() }));

  app.post('/generate', generateHandler);
  app.post('/updatetask', updateTaskHandler);
  app.post('/execute', executeHandler);
  app.post('/reset', resetGitHandler);
}

```

src/backend/handlers/resetGitHandler.js:
```
import resetGit from '../../git/resetGit.js';

export default async function resetGitHandler(req, res) {
  try {
    await resetGit();
    res.status(200).send({ message: 'Git successfully reset' });
  } catch (error) {
    res.status(500).send({ message: 'Error in resetting Git', error });
  }
}

```

src/git/resetGit.js:
```
import { exec } from 'child_process';

export default function resetGit() {
  // Stash all changes including untracked files
  exec('git stash -u', (err, stdout, stderr) => {
    if (err) {
      console.error(`exec error: ${err}`);
      return;
    }
    console.log(`stdout: ${stdout}`);

    // Clean the repository and reset to the latest commit
    exec('git clean -f -d && git reset --hard', (err, stdout, stderr) => {
      if (err) {
        console.error(`exec error: ${err}`);
        return;
      }
      console.log(`stdout: ${stdout}`);

      // Checkout prompt.yaml from stash
      exec('git checkout stash@{0} -- prompt.yaml', (err, stdout, stderr) => {
        if (err) {
          console.error(`exec error: ${err}`);
          return;
        }
        console.log(`stdout: ${stdout}`);

        // Drop the stash
        exec('git stash drop', (err, stdout, stderr) => {
          if (err) {
            console.error(`exec error: ${err}`);
            return;
          }
          console.log(`stdout: ${stdout}`);
        });
      });
    });
  });
}

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Create an endpoint &#34;/status&#34; which runs git status



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- The frontend uses *Solidjs*, edit .jsx file accordingly


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, prefer heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.2670157068062827,0.8194318597002248,25.39685019840059
"# Working set

src/prompt/createPrompt.js:
```
import { readAttention } from ""../attention/readAttention.js""
import yaml from 'js-yaml';
import { getSystemPromptIfNeeded } from './getSystemPromptIfNeeded.js';
import { resolveTemplateVariables } from './resolveTemplateVariables.js';
import { extractTemplateVars } from './extractTemplateVars.js';
import { loadPromptDescriptor } from './loadPromptDescriptor.js';
import { loadTaskTemplate } from './loadTaskTemplate.js';
import { loadFormatTemplate } from './loadFormatTemplate.js';
import promptDescriptorDefaults from './promptDescriptorDefaults.js';

const createPrompt = async (userInput) => {
  let promptDescriptorDefaultsData = await promptDescriptorDefaults();
  let promptDescriptor = yaml.load(await loadPromptDescriptor());

  // Fill in the defaults from promptDescriptorDefaults.js
  promptDescriptor = { ...promptDescriptorDefaultsData, ...promptDescriptor };

  let templateVars = extractTemplateVars(promptDescriptor);
  templateVars = await resolveTemplateVariables(templateVars);

  const attention = await readAttention(promptDescriptor.attention);
  const task = await loadTaskTemplate(promptDescriptor.task, templateVars);

  const format = await loadFormatTemplate(promptDescriptor.format, templateVars);
  const system = await getSystemPromptIfNeeded();
  const saveto = promptDescriptor.saveto;
  return {
    prompt: `${system}# Working set\n\n${attention.join(""\n"")}\n\n# Task\n\n${task}\n\n# Output Format\n\n${format}\n\n${userInput ? userInput : """"}`,
    saveto
  };
}

export { createPrompt };

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

Switch order of loading the descriptor yaml and the defaults



## Project Specifics

- Every js file should *only export a single function*!
- Use *ES6 imports*!
- The frontend uses *Solidjs*, edit .jsx file accordingly


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, prefer heredoc-ing full files using 'EOF' to prevent substitution.

OS: OSX

Installed tools: npm, jq


Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.4972067039106145,0.8220405390526341,15.0996688705415
"# Working set

```
./
├── .DS_Store
├── .git/...
├── .github/...
├── .gitignore
├── .vscode/...
├── README.md
├── babel.config.js
├── change.sh
├── doc/...
├── integrations/...
├── node_modules/...
├── package-lock.json
├── package.json
├── prompt/...
├── prompt.md
├── prompt.yaml
├── src/...
├── tailwind.config.js

```
```
src/
├── .DS_Store
├── attention/...
├── backend/...
├── config.js
├── doc/...
├── execute/...
├── frontend/...
├── git/...
├── index.html
├── interactiveSession/...
├── llm/...
├── main.js
├── prompt/...
├── startVite.js
├── vite.config.js
├── web.js

```
```
src/frontend/
├── App.jsx
├── components/...
├── fetchTasks.js
├── generatePrompt.js
├── getBaseUrl.js
├── index.jsx
├── postcss.config.cjs
├── service/...
├── stores/...
├── styles/...

```
src/frontend/postcss.config.cjs:
```
const tailwindcss = require('tailwindcss');
const autoprefixer = require('autoprefixer');
const postcssImport = require('postcss-import');
const postcssNested = require('postcss-nested');

module.exports = {
  plugins: {
    'postcss-import': {},
    'tailwindcss/nesting': postcssNested,
    tailwindcss: tailwindcss,
    autoprefixer: autoprefixer,
  },
};

```

src/vite.config.js:
```
import { defineConfig } from 'vite'
import solidPlugin from 'vite-plugin-solid'

export default defineConfig({
  plugins: [solidPlugin()],
  css: {
    postcss: './src/frontend/postcss.config.cjs'
  },
  build: {
    target: 'esnext',
  },
})

```

tailwind.config.js:
```
module.exports = {
  content: ['./src/**/*.html', './src/**/*.js', './src/**/*.jsx', './src/**/*.tsx', './src/**/*.ts'],
  theme: {
    screens: {
      'xs': '320px',
      'sm': '640px',
      'md': '768px',
      'lg': '1024px',
      'xl': '1280px',
      '2xl': '1536px',
    },
    extend: {
      // Extend the spacing for larger gaps
      spacing: {
        '72': '18rem',
        '84': '21rem',
        '96': '24rem',
        '128': '32rem',
      },
      // Extend the button styles for larger buttons
      fontSize: {
        'btn': '1.5rem',
      },
      padding: {
        'btn': '1.5rem',
      },
      // Extend the maxWidth for desktop container
      maxWidth: {
        'desktop': '640px',
      },
    },
  },
  variants: {
    extend: {},
  },
  plugins: [],
}

```


# Task

Move the following files to the specified target dirs!

Find out the best target dir if it is not specified!

You need to follow dependencies to maintain coherence.

Before executing, write a concise plan! The plan should show:
 - How do you avoid breaking other parts of the code.
 - If you had to choose, your way of thinking.

Move the tailwind config to src/frontend/, convert it to .cjs (no es6 imports) and configure the project to use it.
FYI the tailwind docs says:
If you’re using Tailwind as a PostCSS plugin, you will need to specify your custom configuration path in your PostCSS configuration:
postcss.config.js: module.exports = {
  plugins: {
    tailwindcss: { config: &#39;./tailwindcss-config.js&#39; },
  },
}


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, prefer heredoc-ing full files using 'EOF' to prevent substitution.
OS: OSX
Installed tools: npm, jq
Do NOT write any text outside the script!

EXAMPLE START

```sh
#!/bin/sh
set -e
goal=[Task description, max 7 words]
echo ""Plan:""
echo ""1. [...]""
[Commands solving the task]
echo ""\033[32mDone: $goal\033[0m\n""
```

EXAMPLE END

",0.1799163179916318,0.7528115621168333,30.265491900843113
"You are AI Junior, you code like Donald Knuth.
# Working set

./src/frontend/components/terminal/TerminalComponent.jsx:
```
import { onCleanup, onMount } from 'solid-js';
import { Terminal } from 'xterm';
import 'xterm/css/xterm.css';
import terminalConnection from '../../service/terminal/terminalConnection';

const TerminalComponent = () => {
  let container;
  const term = new Terminal();
  
  onMount(() => {
    term.open(container);

    terminalConnection.setOnDataReceived((data) => {
      term.write(data);
    });

    term.onData((data) => {
      terminalConnection.sendDataToTerminal(data);
    });
  });
  
  // Ensure terminal instance gets destroyed and WebSocket connection gets closed on component cleanup
  onCleanup(() => {
    term.dispose();
    terminalConnection.closeConnection();
  });

  return (
    <div class=""rounded border p-4 w-full"" ref={container}>
      {/* The terminal will be rendered inside this div */}
    </div>
  );
};

export default TerminalComponent;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!

Requirements:

- Factor out xterm.js initialization to setupXTerm.js
- Install and use xterm-addon-fit

docs for your reference:

Addons / fit
The fit addon provides the fit method that lets you adjust the size and geometry (columns 𝗑 rows) of the terminal to fit the size of the parent element.

import { Terminal } from 'xterm';
import { FitAddon } from 'xterm-addon-fit';

const term = new Terminal();
const fitAddon = new FitAddon();
term.loadAddon(fitAddon);

// Open the terminal in #terminal-container
term.open(document.getElementById('terminal-container'));

// Make the terminal's size and geometry fit the size of #terminal-container
fitAddon.fit();



## Project Specifics

- Every js file should *only export a single function or signal*! eg.: in createGitRepo.js: export function createGitRepo ( ....
- Use *ES6 imports*!
- Prefer *async/await* over promises!
- The frontend uses *Solidjs* and Tailwind, edit .jsx files accordingly!

# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, avoid using sed in favor of heredoc-ing full files.

OS: OSX

Installed tools: npm, jq


Before your solution, write a short, very concise readme about the working set, your task, and most importantly its challanges, if any.


EXAMPLE START
```sh
#!/bin/sh
set -e
goal=[Task description, max 9 words]
echo ""Plan:""
echo ""1. [...]""
cat > x.js << 'EOF'
[...]
'EOF'
echo ""\033[32mDone: $goal\033[0m\n""
```
EXAMPLE END

Before starting, check if you need more files or info to solve the task.

If the task is not clear:

EXAMPLE START
I need more information to solve the task. [Description of the missing info]
EXAMPLE END

Do not edit files not provided in the working set!
If you need more files:

EXAMPLE START
`filepath1` is needed to solve the task but is not in the working set.
EXAMPLE END


",0.5051546391752577,0.9662432588664701,13.076696830622021
"# Working set

src/execute/executeAndForwardOutput.js:
```
import { spawn } from 'child_process';
import { rl } from '../config.js';

function executeAndForwardOutput(code, next) {
  const child = spawn(code, { shell: true });
  let last_command_result = '';

  child.stdout.on('data', (data) => {
    console.log(`${data}`);
    last_command_result += data;
  });

  child.stderr.on('data', (data) => {
    console.error(`${data}`);
    last_command_result += data;
  });

  child.on('close', (code) => {
    if (code !== 0) {
      console.log(`child process exited with code ${code}`);
      last_command_result = ""Command failed. Output:\n"" + last_command_result;
    } else {
      last_command_result = ""Command executed. Output:\n"" + last_command_result;
    }
    next();
  });
}

export { executeAndForwardOutput };

```

src/frontend/service/executeChange.js:
```
import { getBaseUrl } from '../getBaseUrl';

const executeChange = async (change) => {
  const baseUrl = getBaseUrl();
  const response = await fetch(`${baseUrl}/execute`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ change })
  });

  const data = await response.json();

  return data;
};

export { executeChange };

```

src/backend/setupRoutes.js:
```
import { generateHandler } from './handlers/generateHandler.js';
import { servePromptDescriptor } from './handlers/servePromptDescriptor.js';
import { updateTaskHandler } from './handlers/updateTaskHandler.js';
import { listTasks } from './handlers/listTasks.js';

export function setupRoutes(app) {
  app.get('/descriptor', servePromptDescriptor);
  app.get('/tasks', (req, res) => res.json({ tasks: listTasks() }));

  app.post('/generate', generateHandler);
  app.post('/updatetask', updateTaskHandler);
}

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!
- Every js file should only export a single function!
- Use ES6 imports!

Requirements:

Create new backend endpoint &#34;execute&#34; that will call executeAndForwardOutput on the posted data.



# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, prefer heredoc-ing full files without substitution.
Assume OSX.
npm and jq are installed.
Do NOT write any text outside the script (the plan goes into it)!


EXAMPLE START

```sh
#!/bin/sh
# Goal: [Task description, max 7 words]
# Plan:
# 1. [...]

[Commands solving the task]
```

EXAMPLE END

",0.25280898876404495,0.6703262173934073,31.622776601683793
"# Working set

src/frontend/App.jsx:
```
import NotesInput from './components/NotesInput';
import StartButton from './components/StartButton';
import PromptDisplay from './components/PromptDisplay';
import TasksList from './components/TasksList';
import PromptDescriptor from './components/PromptDescriptor';
import NavBar from './components/NavBar';
import { notes, setNotes } from './stores/notes';
import { setPrompt } from './stores/prompt';

const App = () => {
  return (
    <div class=""max-w-desktop lg:max-w-desktop md:max-w-full sm:max-w-full xs:max-w-full mx-auto flex flex-col items-center space-y-8 sm:p-0"">
      <NavBar />
      <TasksList />
      <PromptDescriptor />
      <NotesInput notes={notes} setNotes={setNotes} />
      <StartButton notes={notes} setPrompt={setPrompt} />
      <PromptDisplay />
    </div>
  );
};

export default App;

```

src/frontend/components/PromptDescriptor.jsx:
```
import { onMount, onCleanup } from 'solid-js';
import { fetchDescriptor } from '../service/fetchDescriptor';
import { useWebsocket } from '../service/useWebsocket';
import { promptDescriptor, setPromptDescriptor } from '../stores/promptDescriptor';

const PromptDescriptor = () => {

  onMount(async () => {
    const text = await fetchDescriptor();
    setPromptDescriptor(text);
  });

  useWebsocket(async (e) => {
    if (e.data === 'update') {
      const text = await fetchDescriptor();
      setPromptDescriptor(text);
    }
  });

  onCleanup(() => {
    setPromptDescriptor('');
  });

  return (
    <div class=""overflow-auto max-w-full"">
      <pre>{promptDescriptor()}</pre>
    </div>
  );
};

export default PromptDescriptor;

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!
- Every js file should only export a single function!
- Use ES6 imports!

Requirements:

The pre should not be wider than the screen.
Allow wrapping of the text!
add an extra div if needed.
Use tailwind utility classes.



# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, prefer heredoc-ing full files without substitution.
Assume OSX.
npm and jq are installed.
Do NOT write any text outside the script (the plan goes into it)!


EXAMPLE START

```sh
#!/bin/sh
# Goal: [Task description, max 7 words]
# Plan:
# 1. [...]

[Commands solving the task]
```

EXAMPLE END

",0.3696969696969697,0.9686854518806556,20.29778313018444
"# Working set

integrations/vscode/src/writeAttention.ts:
```
import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';
import * as yaml from 'js-yaml';

export const writeAttention = async () => {
    const workspaceFolders = vscode.workspace.workspaceFolders;
    if (workspaceFolders === undefined) {
        return;
    }
    
    const rootFolder = workspaceFolders[0].uri.fsPath;
    const promptFilePath = path.join(rootFolder, 'prompt.yaml');
    try {
        if (fs.existsSync(promptFilePath)) {
            const currentWindows = vscode.workspace.textDocuments.map(doc => path.relative(rootFolder, doc.fileName));
            const filteredWindows = currentWindows.filter(windowPath => !windowPath.endsWith('.git'));
            const promptFile = yaml.load(fs.readFileSync(promptFilePath, 'utf8'));
            promptFile.attention = filteredWindows;
            fs.writeFileSync(promptFilePath, yaml.dump(promptFile), 'utf8');
            vscode.window.showInformationMessage('Prompt file updated successfully!');
        } else {
            vscode.window.showErrorMessage('No prompt.yaml file found in the project root!');
        }
    } catch (error) {
        vscode.window.showErrorMessage('Error updating the prompt.yaml file!');
    }
};

```

integrations/vscode/src/extension.ts:
```
import * as vscode from 'vscode';
import { writeAttention } from './writeAttention';

export function activate(context: vscode.ExtensionContext) {
	console.log('Junior extension is now active!');

	let helloWorldDisposable = vscode.commands.registerCommand('junior.helloWorld', () => {
		vscode.window.showInformationMessage('Hello World from Junior!');
	});

	let writeAttentionDisposable = vscode.commands.registerCommand('junior.writeAttention', writeAttention);

	context.subscriptions.push(helloWorldDisposable);
	context.subscriptions.push(writeAttentionDisposable);
}

export function deactivate() {}

```

integrations/vscode/package.json:
```
{
  ""name"": ""junior"",
  ""displayName"": ""Junior"",
  ""description"": ""Your AI contributor"",
  ""version"": ""0.0.1"",
  ""engines"": {
    ""vscode"": ""^1.80.0""
  },
  ""categories"": [
    ""Other""
  ],
  ""activationEvents"": [],
  ""main"": ""./out/extension.js"",
  ""contributes"": {
    ""commands"": [
      {
        ""command"": ""junior.helloWorld"",
        ""title"": ""Hello World""
      },
      {
        ""command"": ""junior.writeAttention"",
        ""title"": ""Write Attention""
      }
    ]
  },
  ""scripts"": {
    ""vscode:prepublish"": ""npm run compile"",
    ""compile"": ""tsc -p ./"",
    ""watch"": ""tsc -watch -p ./"",
    ""pretest"": ""npm run compile && npm run lint"",
    ""lint"": ""eslint src --ext ts"",
    ""test"": ""node ./out/test/runTest.js""
  },
  ""devDependencies"": {
    ""@types/glob"": ""^8.1.0"",
    ""@types/mocha"": ""^10.0.1"",
    ""@types/node"": ""20.2.5"",
    ""@types/vscode"": ""^1.80.0"",
    ""@typescript-eslint/eslint-plugin"": ""^5.59.8"",
    ""@typescript-eslint/parser"": ""^5.59.8"",
    ""@vscode/test-electron"": ""^2.3.2"",
    ""eslint"": ""^8.41.0"",
    ""glob"": ""^8.1.0"",
    ""mocha"": ""^10.2.0"",
    ""typescript"": ""^5.1.3""
  },
  ""dependencies"": {
    ""js-yaml"": ""^4.1.0""
  }
}

```


# Task

Implement the following feature!

- Create a plan!
- Create new files when needed!
- Every js file should only export a single function!
- Use ES6 imports!

Requirements:

- Instead of excluding .git - ending elements, only include existing files in the attention. - Also exclude prompt.yaml and prompt.md - Plus allow an attention exclude list (list of globs) as a configuration - Remove the helloworld command



# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, prefer heredoc-ing full files without substitution.
Assume OSX.
npm and jq are installed.
Do NOT write any text outside the script (the plan goes into it)!


EXAMPLE START

```sh
#!/bin/sh
# Goal: [Task description, max 7 words]
# Plan:
# 1. [...]

[Commands solving the task]
```

EXAMPLE END

",0.36741214057507987,0.9925643436428488,50.59644256269407
"# Working set

src/index.html:
```
<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <title>Contributor</title>
</head>
<body>
  <div id=""app""></div>
  <script type=""module"" src=""/frontend/index.jsx""></script>
</body>
</html>

```

src/main.js:
```
#!/usr/bin/env node

import { startInteractiveSession } from './interactiveSession/startInteractiveSession.js';
import { api, get_model, rl } from './config.js';

console.log(""Welcome to Contributor. Model: "" + get_model() + ""\n"");

startInteractiveSession(rl, api);

export { startInteractiveSession };

```

prompt/system.md:
```
You're the 'Contributor', an AI system aiding authors.

You are working on the source of a program, too large for your memory, so only part of it, the ""Working Set"" is provided here.

You will see a partial directory structure. Ask for the contents of subdirs marked with /... if needed.

Some files are printed in the working set.

Other files are only listed in their dir, so you know they exists. Do not edit files without knowing their current content, ask for their contents instead!

```


# Task

Fix the following issue!

The project was renamed to Junior.


# Output Format

Encode and enclose your results as ./change.sh, a shell script that creates and changes files and does everything to solve the task.
Files are small, prefer heredoc-ing full files without substitution.
Assume OSX.
npm and jq are installed.
Do NOT write any text outside the script (the plan goes into it)!


EXAMPLE START

```sh
#!/bin/sh
# Goal: [Task description, max 7 words]
# Plan:
# 1. [...]

[Commands solving the task]
```

EXAMPLE END

",0.25555555555555554,0.5716819557925445,11.357816691600547
